
NeoPixelTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000174e  000017e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000174e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800106  00800106  000017e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001733  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f9  00000000  00000000  00003063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b0  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000779  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b65  00000000  00000000  00004929  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000548e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
      a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      b4:	00 00 00 00                                         ....

000000b8 <__ctors_start>:
      b8:	a5 02       	muls	r26, r21

000000ba <__ctors_end>:
      ba:	ae 02       	muls	r26, r30

000000bc <__dtors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	ee e4       	ldi	r30, 0x4E	; 78
      d0:	f7 e1       	ldi	r31, 0x17	; 23
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a6 30       	cpi	r26, 0x06	; 6
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	a6 e0       	ldi	r26, 0x06	; 6
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a6 32       	cpi	r26, 0x26	; 38
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	cd e5       	ldi	r28, 0x5D	; 93
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <main>
     108:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__do_global_dtors>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_Z9colorWipemh>:
	return 0;
}


// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
     110:	8f 92       	push	r8
     112:	9f 92       	push	r9
     114:	af 92       	push	r10
     116:	bf 92       	push	r11
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	4b 01       	movw	r8, r22
     126:	5c 01       	movw	r10, r24
	for(uint16_t i=0; i<strip.numPixels(); i++) {
     128:	c0 e0       	ldi	r28, 0x00	; 0
     12a:	d0 e0       	ldi	r29, 0x00	; 0
		strip.setPixelColor(i, c);
		strip.show();
		delay(wait);
     12c:	c4 2e       	mov	r12, r20
     12e:	d1 2c       	mov	r13, r1
     130:	e1 2c       	mov	r14, r1
     132:	f1 2c       	mov	r15, r1
}


// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
	for(uint16_t i=0; i<strip.numPixels(); i++) {
     134:	10 c0       	rjmp	.+32     	; 0x156 <_Z9colorWipemh+0x46>
		strip.setPixelColor(i, c);
     136:	a5 01       	movw	r20, r10
     138:	94 01       	movw	r18, r8
     13a:	be 01       	movw	r22, r28
     13c:	86 e0       	ldi	r24, 0x06	; 6
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		strip.show();
     144:	86 e0       	ldi	r24, 0x06	; 6
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN17Adafruit_NeoPixel4showEv>
		delay(wait);
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 84 03 	call	0x708	; 0x708 <delay>
}


// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
	for(uint16_t i=0; i<strip.numPixels(); i++) {
     154:	21 96       	adiw	r28, 0x01	; 1
     156:	86 e0       	ldi	r24, 0x06	; 6
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     15e:	c8 17       	cp	r28, r24
     160:	d9 07       	cpc	r29, r25
     162:	48 f3       	brcs	.-46     	; 0x136 <_Z9colorWipemh+0x26>
		strip.setPixelColor(i, c);
		strip.show();
		delay(wait);
	}
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	08 95       	ret

0000017a <_Z12theaterChasemh>:
		delay(wait);
	}
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
     17a:	2f 92       	push	r2
     17c:	3f 92       	push	r3
     17e:	4f 92       	push	r4
     180:	5f 92       	push	r5
     182:	6f 92       	push	r6
     184:	7f 92       	push	r7
     186:	8f 92       	push	r8
     188:	9f 92       	push	r9
     18a:	af 92       	push	r10
     18c:	bf 92       	push	r11
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	4b 01       	movw	r8, r22
     1a0:	5c 01       	movw	r10, r24
			}
			strip.show();
			
			delay(wait);
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     1a2:	0f 2e       	mov	r0, r31
     1a4:	fa e0       	ldi	r31, 0x0A	; 10
     1a6:	ef 2e       	mov	r14, r31
     1a8:	f1 2c       	mov	r15, r1
     1aa:	f0 2d       	mov	r31, r0
     1ac:	31 2c       	mov	r3, r1
     1ae:	21 2c       	mov	r2, r1
		delay(wait);
	}
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
     1b0:	c3 2c       	mov	r12, r3
     1b2:	d2 2c       	mov	r13, r2
			for (int i=0; i < strip.numPixels(); i=i+3) {
				strip.setPixelColor(i+q, c);    //turn every third pixel on
			}
			strip.show();
			
			delay(wait);
     1b4:	44 2e       	mov	r4, r20
     1b6:	51 2c       	mov	r5, r1
     1b8:	61 2c       	mov	r6, r1
     1ba:	71 2c       	mov	r7, r1
     1bc:	3a c0       	rjmp	.+116    	; 0x232 <_Z12theaterChasemh+0xb8>
     1be:	be 01       	movw	r22, r28
     1c0:	60 0f       	add	r22, r16
     1c2:	71 1f       	adc	r23, r17
//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
	for (int j=0; j<10; j++) {  //do 10 cycles of chasing
		for (int q=0; q < 3; q++) {
			for (int i=0; i < strip.numPixels(); i=i+3) {
				strip.setPixelColor(i+q, c);    //turn every third pixel on
     1c4:	a5 01       	movw	r20, r10
     1c6:	94 01       	movw	r18, r8
     1c8:	86 e0       	ldi	r24, 0x06	; 6
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
	for (int j=0; j<10; j++) {  //do 10 cycles of chasing
		for (int q=0; q < 3; q++) {
			for (int i=0; i < strip.numPixels(); i=i+3) {
     1d0:	23 96       	adiw	r28, 0x03	; 3
     1d2:	86 e0       	ldi	r24, 0x06	; 6
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     1da:	c8 17       	cp	r28, r24
     1dc:	d9 07       	cpc	r29, r25
     1de:	78 f3       	brcs	.-34     	; 0x1be <_Z12theaterChasemh+0x44>
				strip.setPixelColor(i+q, c);    //turn every third pixel on
			}
			strip.show();
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN17Adafruit_NeoPixel4showEv>
			
			delay(wait);
     1e8:	c3 01       	movw	r24, r6
     1ea:	b2 01       	movw	r22, r4
     1ec:	0e 94 84 03 	call	0x708	; 0x708 <delay>
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     1f0:	cc 2d       	mov	r28, r12
     1f2:	dd 2d       	mov	r29, r13
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <_Z12theaterChasemh+0x92>
     1f6:	b8 01       	movw	r22, r16
     1f8:	6c 0f       	add	r22, r28
     1fa:	7d 1f       	adc	r23, r29
				strip.setPixelColor(i+q, 0);        //turn every third pixel off
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	a9 01       	movw	r20, r18
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
			}
			strip.show();
			
			delay(wait);
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     20a:	23 96       	adiw	r28, 0x03	; 3
     20c:	86 e0       	ldi	r24, 0x06	; 6
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     214:	c8 17       	cp	r28, r24
     216:	d9 07       	cpc	r29, r25
     218:	70 f3       	brcs	.-36     	; 0x1f6 <_Z12theaterChasemh+0x7c>
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
	for (int j=0; j<10; j++) {  //do 10 cycles of chasing
		for (int q=0; q < 3; q++) {
     21a:	0f 5f       	subi	r16, 0xFF	; 255
     21c:	1f 4f       	sbci	r17, 0xFF	; 255
     21e:	03 30       	cpi	r16, 0x03	; 3
     220:	11 05       	cpc	r17, r1
     222:	19 f0       	breq	.+6      	; 0x22a <_Z12theaterChasemh+0xb0>
		delay(wait);
	}
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
     224:	cc 2d       	mov	r28, r12
     226:	dd 2d       	mov	r29, r13
     228:	d4 cf       	rjmp	.-88     	; 0x1d2 <_Z12theaterChasemh+0x58>
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	e8 1a       	sub	r14, r24
     22e:	f1 08       	sbc	r15, r1
	for (int j=0; j<10; j++) {  //do 10 cycles of chasing
     230:	19 f0       	breq	.+6      	; 0x238 <_Z12theaterChasemh+0xbe>
			}
			strip.show();
			
			delay(wait);
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     232:	03 2d       	mov	r16, r3
     234:	12 2d       	mov	r17, r2
     236:	f6 cf       	rjmp	.-20     	; 0x224 <_Z12theaterChasemh+0xaa>
				strip.setPixelColor(i+q, 0);        //turn every third pixel off
			}
		}
	}
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	df 90       	pop	r13
     246:	cf 90       	pop	r12
     248:	bf 90       	pop	r11
     24a:	af 90       	pop	r10
     24c:	9f 90       	pop	r9
     24e:	8f 90       	pop	r8
     250:	7f 90       	pop	r7
     252:	6f 90       	pop	r6
     254:	5f 90       	pop	r5
     256:	4f 90       	pop	r4
     258:	3f 90       	pop	r3
     25a:	2f 90       	pop	r2
     25c:	08 95       	ret

0000025e <_Z5Wheelh>:
		}
	}
}

uint32_t Wheel(byte WheelPos) {
	WheelPos = 255 - WheelPos;
     25e:	80 95       	com	r24
	if(WheelPos < 85) {
     260:	85 35       	cpi	r24, 0x55	; 85
     262:	48 f4       	brcc	.+18     	; 0x276 <_Z5Wheelh+0x18>
		return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
     264:	68 2f       	mov	r22, r24
     266:	66 0f       	add	r22, r22
     268:	86 0f       	add	r24, r22
     26a:	48 2f       	mov	r20, r24
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	80 95       	com	r24
     270:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     274:	08 95       	ret
		} else if(WheelPos < 170) {
     276:	8a 3a       	cpi	r24, 0xAA	; 170
     278:	50 f4       	brcc	.+20     	; 0x28e <_Z5Wheelh+0x30>
		WheelPos -= 85;
     27a:	85 55       	subi	r24, 0x55	; 85
		return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
     27c:	68 2f       	mov	r22, r24
     27e:	66 0f       	add	r22, r22
     280:	68 0f       	add	r22, r24
     282:	46 2f       	mov	r20, r22
     284:	40 95       	com	r20
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     28c:	08 95       	ret
		} else {
		WheelPos -= 170;
     28e:	8a 5a       	subi	r24, 0xAA	; 170
		return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
     290:	68 2f       	mov	r22, r24
     292:	66 0f       	add	r22, r22
     294:	86 0f       	add	r24, r22
     296:	68 2f       	mov	r22, r24
     298:	60 95       	com	r22
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
	}
     2a0:	08 95       	ret

000002a2 <_Z7rainbowh>:
		strip.show();
		delay(wait);
	}
}

void rainbow(uint8_t wait) {
     2a2:	af 92       	push	r10
     2a4:	bf 92       	push	r11
     2a6:	cf 92       	push	r12
     2a8:	df 92       	push	r13
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
	uint16_t i, j;

	for(j=0; j<256; j++) {
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	10 e0       	ldi	r17, 0x00	; 0
		strip.show();
		delay(wait);
	}
}

void rainbow(uint8_t wait) {
     2ba:	a1 2c       	mov	r10, r1
     2bc:	b1 2c       	mov	r11, r1
	for(j=0; j<256; j++) {
		for(i=0; i<strip.numPixels(); i++) {
			strip.setPixelColor(i, Wheel((i+j) & 255));
		}
		strip.show();
		delay(wait);
     2be:	c8 2e       	mov	r12, r24
     2c0:	d1 2c       	mov	r13, r1
     2c2:	e1 2c       	mov	r14, r1
     2c4:	f1 2c       	mov	r15, r1
     2c6:	21 c0       	rjmp	.+66     	; 0x30a <_Z7rainbowh+0x68>
void rainbow(uint8_t wait) {
	uint16_t i, j;

	for(j=0; j<256; j++) {
		for(i=0; i<strip.numPixels(); i++) {
			strip.setPixelColor(i, Wheel((i+j) & 255));
     2c8:	8c 2f       	mov	r24, r28
     2ca:	80 0f       	add	r24, r16
     2cc:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z5Wheelh>
     2d0:	9b 01       	movw	r18, r22
     2d2:	ac 01       	movw	r20, r24
     2d4:	be 01       	movw	r22, r28
     2d6:	86 e0       	ldi	r24, 0x06	; 6
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>

void rainbow(uint8_t wait) {
	uint16_t i, j;

	for(j=0; j<256; j++) {
		for(i=0; i<strip.numPixels(); i++) {
     2de:	21 96       	adiw	r28, 0x01	; 1
     2e0:	86 e0       	ldi	r24, 0x06	; 6
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     2e8:	c8 17       	cp	r28, r24
     2ea:	d9 07       	cpc	r29, r25
     2ec:	68 f3       	brcs	.-38     	; 0x2c8 <_Z7rainbowh+0x26>
			strip.setPixelColor(i, Wheel((i+j) & 255));
		}
		strip.show();
     2ee:	86 e0       	ldi	r24, 0x06	; 6
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN17Adafruit_NeoPixel4showEv>
		delay(wait);
     2f6:	c7 01       	movw	r24, r14
     2f8:	b6 01       	movw	r22, r12
     2fa:	0e 94 84 03 	call	0x708	; 0x708 <delay>
}

void rainbow(uint8_t wait) {
	uint16_t i, j;

	for(j=0; j<256; j++) {
     2fe:	0f 5f       	subi	r16, 0xFF	; 255
     300:	1f 4f       	sbci	r17, 0xFF	; 255
     302:	01 15       	cp	r16, r1
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	18 07       	cpc	r17, r24
     308:	19 f0       	breq	.+6      	; 0x310 <_Z7rainbowh+0x6e>
		strip.show();
		delay(wait);
	}
}

void rainbow(uint8_t wait) {
     30a:	ca 2d       	mov	r28, r10
     30c:	db 2d       	mov	r29, r11
     30e:	e8 cf       	rjmp	.-48     	; 0x2e0 <_Z7rainbowh+0x3e>
			strip.setPixelColor(i, Wheel((i+j) & 255));
		}
		strip.show();
		delay(wait);
	}
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	bf 90       	pop	r11
     322:	af 90       	pop	r10
     324:	08 95       	ret

00000326 <_Z12rainbowCycleh>:

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
     326:	8f 92       	push	r8
     328:	9f 92       	push	r9
     32a:	af 92       	push	r10
     32c:	bf 92       	push	r11
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
	uint16_t i, j;

	for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
     33e:	e1 2c       	mov	r14, r1
     340:	f1 2c       	mov	r15, r1
		delay(wait);
	}
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
     342:	c1 2c       	mov	r12, r1
     344:	d1 2c       	mov	r13, r1
	for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
		for(i=0; i< strip.numPixels(); i++) {
			strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
		}
		strip.show();
		delay(wait);
     346:	88 2e       	mov	r8, r24
     348:	91 2c       	mov	r9, r1
     34a:	a1 2c       	mov	r10, r1
     34c:	b1 2c       	mov	r11, r1
     34e:	2b c0       	rjmp	.+86     	; 0x3a6 <_Z12rainbowCycleh+0x80>
void rainbowCycle(uint8_t wait) {
	uint16_t i, j;

	for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
		for(i=0; i< strip.numPixels(); i++) {
			strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     358:	bc 01       	movw	r22, r24
     35a:	c8 01       	movw	r24, r16
     35c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__udivmodhi4>
     360:	86 2f       	mov	r24, r22
     362:	8e 0d       	add	r24, r14
     364:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z5Wheelh>
     368:	9b 01       	movw	r18, r22
     36a:	ac 01       	movw	r20, r24
     36c:	be 01       	movw	r22, r28
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
	uint16_t i, j;

	for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
		for(i=0; i< strip.numPixels(); i++) {
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	13 95       	inc	r17
     37a:	86 e0       	ldi	r24, 0x06	; 6
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     382:	c8 17       	cp	r28, r24
     384:	d9 07       	cpc	r29, r25
     386:	20 f3       	brcs	.-56     	; 0x350 <_Z12rainbowCycleh+0x2a>
			strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
		}
		strip.show();
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN17Adafruit_NeoPixel4showEv>
		delay(wait);
     390:	c5 01       	movw	r24, r10
     392:	b4 01       	movw	r22, r8
     394:	0e 94 84 03 	call	0x708	; 0x708 <delay>

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
	uint16_t i, j;

	for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	e8 1a       	sub	r14, r24
     39c:	f8 0a       	sbc	r15, r24
     39e:	e1 14       	cp	r14, r1
     3a0:	85 e0       	ldi	r24, 0x05	; 5
     3a2:	f8 06       	cpc	r15, r24
     3a4:	29 f0       	breq	.+10     	; 0x3b0 <_Z12rainbowCycleh+0x8a>
		delay(wait);
	}
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
     3a6:	0c 2d       	mov	r16, r12
     3a8:	1d 2d       	mov	r17, r13
     3aa:	cc 2d       	mov	r28, r12
     3ac:	dd 2d       	mov	r29, r13
     3ae:	e5 cf       	rjmp	.-54     	; 0x37a <_Z12rainbowCycleh+0x54>
			strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
		}
		strip.show();
		delay(wait);
	}
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	08 95       	ret

000003ca <_Z19theaterChaseRainbowh>:
		}
	}
}


void theaterChaseRainbow(uint8_t wait) {
     3ca:	4f 92       	push	r4
     3cc:	5f 92       	push	r5
     3ce:	6f 92       	push	r6
     3d0:	7f 92       	push	r7
     3d2:	8f 92       	push	r8
     3d4:	9f 92       	push	r9
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
	for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
     3ea:	e1 2c       	mov	r14, r1
     3ec:	f1 2c       	mov	r15, r1
			}
			strip.show();
			
			delay(wait);
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     3ee:	51 2c       	mov	r5, r1
     3f0:	41 2c       	mov	r4, r1

void theaterChaseRainbow(uint8_t wait) {
	for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
		for (int q=0; q < 3; q++) {
			for (int i=0; i < strip.numPixels(); i=i+3) {
				strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
     3f2:	cc 24       	eor	r12, r12
     3f4:	ca 94       	dec	r12
     3f6:	d1 2c       	mov	r13, r1
		}
	}
}


void theaterChaseRainbow(uint8_t wait) {
     3f8:	65 2c       	mov	r6, r5
     3fa:	74 2c       	mov	r7, r4
			for (int i=0; i < strip.numPixels(); i=i+3) {
				strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
			}
			strip.show();
			
			delay(wait);
     3fc:	88 2e       	mov	r8, r24
     3fe:	91 2c       	mov	r9, r1
     400:	a1 2c       	mov	r10, r1
     402:	b1 2c       	mov	r11, r1
     404:	45 c0       	rjmp	.+138    	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     406:	ce 01       	movw	r24, r28
     408:	8e 0d       	add	r24, r14
     40a:	9f 1d       	adc	r25, r15

void theaterChaseRainbow(uint8_t wait) {
	for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
		for (int q=0; q < 3; q++) {
			for (int i=0; i < strip.numPixels(); i=i+3) {
				strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
     40c:	b6 01       	movw	r22, r12
     40e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__divmodhi4>
     412:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z5Wheelh>
     416:	9b 01       	movw	r18, r22
     418:	ac 01       	movw	r20, r24
     41a:	be 01       	movw	r22, r28
     41c:	60 0f       	add	r22, r16
     41e:	71 1f       	adc	r23, r17
     420:	86 e0       	ldi	r24, 0x06	; 6
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>


void theaterChaseRainbow(uint8_t wait) {
	for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
		for (int q=0; q < 3; q++) {
			for (int i=0; i < strip.numPixels(); i=i+3) {
     428:	23 96       	adiw	r28, 0x03	; 3
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     432:	c8 17       	cp	r28, r24
     434:	d9 07       	cpc	r29, r25
     436:	38 f3       	brcs	.-50     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
				strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
			}
			strip.show();
     438:	86 e0       	ldi	r24, 0x06	; 6
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN17Adafruit_NeoPixel4showEv>
			
			delay(wait);
     440:	c5 01       	movw	r24, r10
     442:	b4 01       	movw	r22, r8
     444:	0e 94 84 03 	call	0x708	; 0x708 <delay>
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     448:	c6 2d       	mov	r28, r6
     44a:	d7 2d       	mov	r29, r7
     44c:	0b c0       	rjmp	.+22     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     44e:	b8 01       	movw	r22, r16
     450:	6c 0f       	add	r22, r28
     452:	7d 1f       	adc	r23, r29
				strip.setPixelColor(i+q, 0);        //turn every third pixel off
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	a9 01       	movw	r20, r18
     45a:	86 e0       	ldi	r24, 0x06	; 6
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
			}
			strip.show();
			
			delay(wait);
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     462:	23 96       	adiw	r28, 0x03	; 3
     464:	86 e0       	ldi	r24, 0x06	; 6
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
     46c:	c8 17       	cp	r28, r24
     46e:	d9 07       	cpc	r29, r25
     470:	70 f3       	brcs	.-36     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
}


void theaterChaseRainbow(uint8_t wait) {
	for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
		for (int q=0; q < 3; q++) {
     472:	0f 5f       	subi	r16, 0xFF	; 255
     474:	1f 4f       	sbci	r17, 0xFF	; 255
     476:	03 30       	cpi	r16, 0x03	; 3
     478:	11 05       	cpc	r17, r1
     47a:	19 f0       	breq	.+6      	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
		}
	}
}


void theaterChaseRainbow(uint8_t wait) {
     47c:	c6 2d       	mov	r28, r6
     47e:	d7 2d       	mov	r29, r7
     480:	d4 cf       	rjmp	.-88     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
	for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	e8 1a       	sub	r14, r24
     486:	f8 0a       	sbc	r15, r24
     488:	e1 14       	cp	r14, r1
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	f8 06       	cpc	r15, r24
     48e:	19 f0       	breq	.+6      	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
			}
			strip.show();
			
			delay(wait);
			
			for (int i=0; i < strip.numPixels(); i=i+3) {
     490:	05 2d       	mov	r16, r5
     492:	14 2d       	mov	r17, r4
     494:	f3 cf       	rjmp	.-26     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
				strip.setPixelColor(i+q, 0);        //turn every third pixel off
			}
		}
	}
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	6f 90       	pop	r6
     4b2:	5f 90       	pop	r5
     4b4:	4f 90       	pop	r4
     4b6:	08 95       	ret

000004b8 <main>:
void rainbowCycle(uint8_t wait);
void rainbow(uint8_t wait);
void colorWipe(uint32_t c, uint8_t wait);
int main(void)
{
init();
     4b8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <init>
strip.begin();
     4bc:	86 e0       	ldi	r24, 0x06	; 6
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN17Adafruit_NeoPixel5beginEv>
strip.setBrightness(24);
     4c4:	68 e1       	ldi	r22, 0x18	; 24
     4c6:	86 e0       	ldi	r24, 0x06	; 6
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN17Adafruit_NeoPixel13setBrightnessEh>
strip.show();
     4ce:	86 e0       	ldi	r24, 0x06	; 6
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN17Adafruit_NeoPixel4showEv>
    /* Replace with your application code */
    while (true) 
    {
	  colorWipe(strip.Color(255, 0, 0), 50); // Red
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     4e0:	42 e3       	ldi	r20, 0x32	; 50
     4e2:	0e 94 88 00 	call	0x110	; 0x110 <_Z9colorWipemh>
	  colorWipe(strip.Color(0, 255, 0), 50); // Green
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	6f ef       	ldi	r22, 0xFF	; 255
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     4f0:	42 e3       	ldi	r20, 0x32	; 50
     4f2:	0e 94 88 00 	call	0x110	; 0x110 <_Z9colorWipemh>
	  colorWipe(strip.Color(0, 0, 255), 50); // Blue
     4f6:	4f ef       	ldi	r20, 0xFF	; 255
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     500:	42 e3       	ldi	r20, 0x32	; 50
     502:	0e 94 88 00 	call	0x110	; 0x110 <_Z9colorWipemh>
	  theaterChase(strip.Color(127, 127, 127), 50); // White
     506:	4f e7       	ldi	r20, 0x7F	; 127
     508:	6f e7       	ldi	r22, 0x7F	; 127
     50a:	8f e7       	ldi	r24, 0x7F	; 127
     50c:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     510:	42 e3       	ldi	r20, 0x32	; 50
     512:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12theaterChasemh>
	  theaterChase(strip.Color(127,   0,   0), 50); // Red
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	8f e7       	ldi	r24, 0x7F	; 127
     51c:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     520:	42 e3       	ldi	r20, 0x32	; 50
     522:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12theaterChasemh>
	  theaterChase(strip.Color(  0,   0, 127), 50); // Blue
     526:	4f e7       	ldi	r20, 0x7F	; 127
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17Adafruit_NeoPixel5ColorEhhh>
     530:	42 e3       	ldi	r20, 0x32	; 50
     532:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12theaterChasemh>

	  rainbow(20);
     536:	84 e1       	ldi	r24, 0x14	; 20
     538:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z7rainbowh>
	  rainbowCycle(20);
     53c:	84 e1       	ldi	r24, 0x14	; 20
     53e:	0e 94 93 01 	call	0x326	; 0x326 <_Z12rainbowCycleh>
	  theaterChaseRainbow(50);
     542:	82 e3       	ldi	r24, 0x32	; 50
     544:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_Z19theaterChaseRainbowh>
void theaterChaseRainbow(uint8_t wait);
void theaterChase(uint32_t c, uint8_t wait);
void rainbowCycle(uint8_t wait);
void rainbow(uint8_t wait);
void colorWipe(uint32_t c, uint8_t wait);
int main(void)
     548:	c6 cf       	rjmp	.-116    	; 0x4d6 <main+0x1e>

0000054a <_GLOBAL__sub_I_strip>:
 */ 

#include <Arduino.h>
#include <NeoPixel.h>
#define PIN 6
Adafruit_NeoPixel strip = Adafruit_NeoPixel(60, PIN, NEO_GRB + NEO_KHZ800);
     54a:	23 e0       	ldi	r18, 0x03	; 3
     54c:	46 e0       	ldi	r20, 0x06	; 6
     54e:	6c e3       	ldi	r22, 0x3C	; 60
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 80 04 	call	0x900	; 0x900 <_ZN17Adafruit_NeoPixelC1Ejhh>
     55a:	08 95       	ret

0000055c <_GLOBAL__sub_D_strip>:
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN17Adafruit_NeoPixelD1Ev>
     564:	08 95       	ret

00000566 <__vector_16>:
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	00 90 5f 00 	lds	r0, 0x005F
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	af 93       	push	r26
     578:	bf 93       	push	r27
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	25 97       	sbiw	r28, 0x05	; 5
     584:	de bf       	out	0x3e, r29	; 62
     586:	cd bf       	out	0x3d, r28	; 61
     588:	80 91 1d 01 	lds	r24, 0x011D
     58c:	90 91 1e 01 	lds	r25, 0x011E
     590:	a0 91 1f 01 	lds	r26, 0x011F
     594:	b0 91 20 01 	lds	r27, 0x0120
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	ab 83       	std	Y+3, r26	; 0x03
     59e:	bc 83       	std	Y+4, r27	; 0x04
     5a0:	80 91 21 01 	lds	r24, 0x0121
     5a4:	8d 83       	std	Y+5, r24	; 0x05
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	ab 81       	ldd	r26, Y+3	; 0x03
     5ac:	bc 81       	ldd	r27, Y+4	; 0x04
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	a1 1d       	adc	r26, r1
     5b2:	b1 1d       	adc	r27, r1
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	ab 83       	std	Y+3, r26	; 0x03
     5ba:	bc 83       	std	Y+4, r27	; 0x04
     5bc:	8d 81       	ldd	r24, Y+5	; 0x05
     5be:	8d 5f       	subi	r24, 0xFD	; 253
     5c0:	8d 83       	std	Y+5, r24	; 0x05
     5c2:	8d 81       	ldd	r24, Y+5	; 0x05
     5c4:	8d 37       	cpi	r24, 0x7D	; 125
     5c6:	70 f0       	brcs	.+28     	; 0x5e4 <__vector_16+0x7e>
     5c8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ca:	8d 57       	subi	r24, 0x7D	; 125
     5cc:	8d 83       	std	Y+5, r24	; 0x05
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	ab 81       	ldd	r26, Y+3	; 0x03
     5d4:	bc 81       	ldd	r27, Y+4	; 0x04
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	a1 1d       	adc	r26, r1
     5da:	b1 1d       	adc	r27, r1
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	ab 83       	std	Y+3, r26	; 0x03
     5e2:	bc 83       	std	Y+4, r27	; 0x04
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	80 93 21 01 	sts	0x0121, r24
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	ab 81       	ldd	r26, Y+3	; 0x03
     5f0:	bc 81       	ldd	r27, Y+4	; 0x04
     5f2:	80 93 1d 01 	sts	0x011D, r24
     5f6:	90 93 1e 01 	sts	0x011E, r25
     5fa:	a0 93 1f 01 	sts	0x011F, r26
     5fe:	b0 93 20 01 	sts	0x0120, r27
     602:	80 91 19 01 	lds	r24, 0x0119
     606:	90 91 1a 01 	lds	r25, 0x011A
     60a:	a0 91 1b 01 	lds	r26, 0x011B
     60e:	b0 91 1c 01 	lds	r27, 0x011C
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	a1 1d       	adc	r26, r1
     616:	b1 1d       	adc	r27, r1
     618:	80 93 19 01 	sts	0x0119, r24
     61c:	90 93 1a 01 	sts	0x011A, r25
     620:	a0 93 1b 01 	sts	0x011B, r26
     624:	b0 93 1c 01 	sts	0x011C, r27
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	bf 91       	pop	r27
     638:	af 91       	pop	r26
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	0f 90       	pop	r0
     640:	00 92 5f 00 	sts	0x005F, r0
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <micros>:
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <micros+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <micros+0x8>
     652:	00 d0       	rcall	.+0      	; 0x654 <micros+0xa>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	8f e5       	ldi	r24, 0x5F	; 95
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	8d 83       	std	Y+5, r24	; 0x05
     662:	f8 94       	cli
     664:	80 91 19 01 	lds	r24, 0x0119
     668:	90 91 1a 01 	lds	r25, 0x011A
     66c:	a0 91 1b 01 	lds	r26, 0x011B
     670:	b0 91 1c 01 	lds	r27, 0x011C
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	ab 83       	std	Y+3, r26	; 0x03
     67a:	bc 83       	std	Y+4, r27	; 0x04
     67c:	86 e4       	ldi	r24, 0x46	; 70
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	8e 83       	std	Y+6, r24	; 0x06
     686:	85 e3       	ldi	r24, 0x35	; 53
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	fc 01       	movw	r30, r24
     68c:	80 81       	ld	r24, Z
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	81 70       	andi	r24, 0x01	; 1
     694:	99 27       	eor	r25, r25
     696:	89 2b       	or	r24, r25
     698:	71 f0       	breq	.+28     	; 0x6b6 <micros+0x6c>
     69a:	8e 81       	ldd	r24, Y+6	; 0x06
     69c:	8f 3f       	cpi	r24, 0xFF	; 255
     69e:	59 f0       	breq	.+22     	; 0x6b6 <micros+0x6c>
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	ab 81       	ldd	r26, Y+3	; 0x03
     6a6:	bc 81       	ldd	r27, Y+4	; 0x04
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	a1 1d       	adc	r26, r1
     6ac:	b1 1d       	adc	r27, r1
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	ab 83       	std	Y+3, r26	; 0x03
     6b4:	bc 83       	std	Y+4, r27	; 0x04
     6b6:	8f e5       	ldi	r24, 0x5F	; 95
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2d 81       	ldd	r18, Y+5	; 0x05
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	ab 81       	ldd	r26, Y+3	; 0x03
     6c6:	bc 81       	ldd	r27, Y+4	; 0x04
     6c8:	22 27       	eor	r18, r18
     6ca:	38 2f       	mov	r19, r24
     6cc:	49 2f       	mov	r20, r25
     6ce:	5a 2f       	mov	r21, r26
     6d0:	8e 81       	ldd	r24, Y+6	; 0x06
     6d2:	88 2f       	mov	r24, r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	a0 e0       	ldi	r26, 0x00	; 0
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	82 0f       	add	r24, r18
     6dc:	93 1f       	adc	r25, r19
     6de:	a4 1f       	adc	r26, r20
     6e0:	b5 1f       	adc	r27, r21
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	aa 1f       	adc	r26, r26
     6e8:	bb 1f       	adc	r27, r27
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	aa 1f       	adc	r26, r26
     6f0:	bb 1f       	adc	r27, r27
     6f2:	bc 01       	movw	r22, r24
     6f4:	cd 01       	movw	r24, r26
     6f6:	26 96       	adiw	r28, 0x06	; 6
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <delay>:
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	28 97       	sbiw	r28, 0x08	; 8
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	6d 83       	std	Y+5, r22	; 0x05
     726:	7e 83       	std	Y+6, r23	; 0x06
     728:	8f 83       	std	Y+7, r24	; 0x07
     72a:	98 87       	std	Y+8, r25	; 0x08
     72c:	0e 94 25 03 	call	0x64a	; 0x64a <micros>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	ab 83       	std	Y+3, r26	; 0x03
     73a:	bc 83       	std	Y+4, r27	; 0x04
     73c:	37 c0       	rjmp	.+110    	; 0x7ac <delay+0xa4>
     73e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <yield>
     742:	17 c0       	rjmp	.+46     	; 0x772 <delay+0x6a>
     744:	8d 81       	ldd	r24, Y+5	; 0x05
     746:	9e 81       	ldd	r25, Y+6	; 0x06
     748:	af 81       	ldd	r26, Y+7	; 0x07
     74a:	b8 85       	ldd	r27, Y+8	; 0x08
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	a1 09       	sbc	r26, r1
     750:	b1 09       	sbc	r27, r1
     752:	8d 83       	std	Y+5, r24	; 0x05
     754:	9e 83       	std	Y+6, r25	; 0x06
     756:	af 83       	std	Y+7, r26	; 0x07
     758:	b8 87       	std	Y+8, r27	; 0x08
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	ab 81       	ldd	r26, Y+3	; 0x03
     760:	bc 81       	ldd	r27, Y+4	; 0x04
     762:	88 51       	subi	r24, 0x18	; 24
     764:	9c 4f       	sbci	r25, 0xFC	; 252
     766:	af 4f       	sbci	r26, 0xFF	; 255
     768:	bf 4f       	sbci	r27, 0xFF	; 255
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	ab 83       	std	Y+3, r26	; 0x03
     770:	bc 83       	std	Y+4, r27	; 0x04
     772:	8d 81       	ldd	r24, Y+5	; 0x05
     774:	9e 81       	ldd	r25, Y+6	; 0x06
     776:	af 81       	ldd	r26, Y+7	; 0x07
     778:	b8 85       	ldd	r27, Y+8	; 0x08
     77a:	89 2b       	or	r24, r25
     77c:	8a 2b       	or	r24, r26
     77e:	8b 2b       	or	r24, r27
     780:	a9 f0       	breq	.+42     	; 0x7ac <delay+0xa4>
     782:	0e 94 25 03 	call	0x64a	; 0x64a <micros>
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	ab 81       	ldd	r26, Y+3	; 0x03
     790:	bc 81       	ldd	r27, Y+4	; 0x04
     792:	79 01       	movw	r14, r18
     794:	8a 01       	movw	r16, r20
     796:	e8 1a       	sub	r14, r24
     798:	f9 0a       	sbc	r15, r25
     79a:	0a 0b       	sbc	r16, r26
     79c:	1b 0b       	sbc	r17, r27
     79e:	d8 01       	movw	r26, r16
     7a0:	c7 01       	movw	r24, r14
     7a2:	88 3e       	cpi	r24, 0xE8	; 232
     7a4:	93 40       	sbci	r25, 0x03	; 3
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	60 f6       	brcc	.-104    	; 0x744 <delay+0x3c>
     7ac:	8d 81       	ldd	r24, Y+5	; 0x05
     7ae:	9e 81       	ldd	r25, Y+6	; 0x06
     7b0:	af 81       	ldd	r26, Y+7	; 0x07
     7b2:	b8 85       	ldd	r27, Y+8	; 0x08
     7b4:	89 2b       	or	r24, r25
     7b6:	8a 2b       	or	r24, r26
     7b8:	8b 2b       	or	r24, r27
     7ba:	09 f6       	brne	.-126    	; 0x73e <delay+0x36>
     7bc:	28 96       	adiw	r28, 0x08	; 8
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	08 95       	ret

000007d6 <init>:
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	78 94       	sei
     7e0:	84 e4       	ldi	r24, 0x44	; 68
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	24 e4       	ldi	r18, 0x44	; 68
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	22 60       	ori	r18, 0x02	; 2
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
     7f2:	84 e4       	ldi	r24, 0x44	; 68
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	24 e4       	ldi	r18, 0x44	; 68
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	20 81       	ld	r18, Z
     7fe:	21 60       	ori	r18, 0x01	; 1
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18
     804:	85 e4       	ldi	r24, 0x45	; 69
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	25 e4       	ldi	r18, 0x45	; 69
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	22 60       	ori	r18, 0x02	; 2
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	85 e4       	ldi	r24, 0x45	; 69
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	25 e4       	ldi	r18, 0x45	; 69
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	21 60       	ori	r18, 0x01	; 1
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
     828:	8e e6       	ldi	r24, 0x6E	; 110
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	2e e6       	ldi	r18, 0x6E	; 110
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	20 81       	ld	r18, Z
     834:	21 60       	ori	r18, 0x01	; 1
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
     83a:	81 e8       	ldi	r24, 0x81	; 129
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	10 82       	st	Z, r1
     842:	81 e8       	ldi	r24, 0x81	; 129
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	21 e8       	ldi	r18, 0x81	; 129
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	20 81       	ld	r18, Z
     84e:	22 60       	ori	r18, 0x02	; 2
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	81 e8       	ldi	r24, 0x81	; 129
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	21 e8       	ldi	r18, 0x81	; 129
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	f9 01       	movw	r30, r18
     85e:	20 81       	ld	r18, Z
     860:	21 60       	ori	r18, 0x01	; 1
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	20 e8       	ldi	r18, 0x80	; 128
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	21 60       	ori	r18, 0x01	; 1
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
     878:	81 eb       	ldi	r24, 0xB1	; 177
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	21 eb       	ldi	r18, 0xB1	; 177
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	f9 01       	movw	r30, r18
     882:	20 81       	ld	r18, Z
     884:	24 60       	ori	r18, 0x04	; 4
     886:	fc 01       	movw	r30, r24
     888:	20 83       	st	Z, r18
     88a:	80 eb       	ldi	r24, 0xB0	; 176
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	20 eb       	ldi	r18, 0xB0	; 176
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	f9 01       	movw	r30, r18
     894:	20 81       	ld	r18, Z
     896:	21 60       	ori	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	8a e7       	ldi	r24, 0x7A	; 122
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	2a e7       	ldi	r18, 0x7A	; 122
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	24 60       	ori	r18, 0x04	; 4
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	8a e7       	ldi	r24, 0x7A	; 122
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2a e7       	ldi	r18, 0x7A	; 122
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	22 60       	ori	r18, 0x02	; 2
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
     8c0:	8a e7       	ldi	r24, 0x7A	; 122
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	2a e7       	ldi	r18, 0x7A	; 122
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	21 60       	ori	r18, 0x01	; 1
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
     8d2:	8a e7       	ldi	r24, 0x7A	; 122
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	2a e7       	ldi	r18, 0x7A	; 122
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	20 68       	ori	r18, 0x80	; 128
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
     8e4:	81 ec       	ldi	r24, 0xC1	; 193
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	10 82       	st	Z, r1
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <yield>:
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <_ZN17Adafruit_NeoPixelC1Ejhh>:
// Returns pointer to pixels[] array.  Pixel data is stored in device-
// native format and is not translated here.  Application will need to be
// aware whether pixels are RGB vs. GRB and handle colors appropriately.
uint8_t *Adafruit_NeoPixel::getPixels(void) const {
  return pixels;
}
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	60 97       	sbiw	r28, 0x10	; 16
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	9c 87       	std	Y+12, r25	; 0x0c
     916:	8b 87       	std	Y+11, r24	; 0x0b
     918:	7e 87       	std	Y+14, r23	; 0x0e
     91a:	6d 87       	std	Y+13, r22	; 0x0d
     91c:	4f 87       	std	Y+15, r20	; 0x0f
     91e:	28 8b       	std	Y+16, r18	; 0x10
     920:	8b 85       	ldd	r24, Y+11	; 0x0b
     922:	9c 85       	ldd	r25, Y+12	; 0x0c
     924:	2d 85       	ldd	r18, Y+13	; 0x0d
     926:	3e 85       	ldd	r19, Y+14	; 0x0e
     928:	fc 01       	movw	r30, r24
     92a:	31 83       	std	Z+1, r19	; 0x01
     92c:	20 83       	st	Z, r18
     92e:	2d 85       	ldd	r18, Y+13	; 0x0d
     930:	3e 85       	ldd	r19, Y+14	; 0x0e
     932:	c9 01       	movw	r24, r18
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	28 0f       	add	r18, r24
     93a:	39 1f       	adc	r19, r25
     93c:	8b 85       	ldd	r24, Y+11	; 0x0b
     93e:	9c 85       	ldd	r25, Y+12	; 0x0c
     940:	fc 01       	movw	r30, r24
     942:	33 83       	std	Z+3, r19	; 0x03
     944:	22 83       	std	Z+2, r18	; 0x02
     946:	8b 85       	ldd	r24, Y+11	; 0x0b
     948:	9c 85       	ldd	r25, Y+12	; 0x0c
     94a:	2f 85       	ldd	r18, Y+15	; 0x0f
     94c:	fc 01       	movw	r30, r24
     94e:	24 83       	std	Z+4, r18	; 0x04
     950:	8b 85       	ldd	r24, Y+11	; 0x0b
     952:	9c 85       	ldd	r25, Y+12	; 0x0c
     954:	fc 01       	movw	r30, r24
     956:	17 82       	std	Z+7, r1	; 0x07
     958:	16 82       	std	Z+6, r1	; 0x06
     95a:	8b 85       	ldd	r24, Y+11	; 0x0b
     95c:	9c 85       	ldd	r25, Y+12	; 0x0c
     95e:	28 89       	ldd	r18, Y+16	; 0x10
     960:	fc 01       	movw	r30, r24
     962:	23 87       	std	Z+11, r18	; 0x0b
     964:	8f 85       	ldd	r24, Y+15	; 0x0f
     966:	88 2f       	mov	r24, r24
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	84 58       	subi	r24, 0x84	; 132
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	9a 83       	std	Y+2, r25	; 0x02
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	fc 01       	movw	r30, r24
     978:	84 91       	lpm	r24, Z
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	8e 58       	subi	r24, 0x8E	; 142
     988:	9f 4f       	sbci	r25, 0xFF	; 255
     98a:	9d 83       	std	Y+5, r25	; 0x05
     98c:	8c 83       	std	Y+4, r24	; 0x04
     98e:	8c 81       	ldd	r24, Y+4	; 0x04
     990:	9d 81       	ldd	r25, Y+5	; 0x05
     992:	fc 01       	movw	r30, r24
     994:	25 91       	lpm	r18, Z+
     996:	34 91       	lpm	r19, Z
     998:	cf 01       	movw	r24, r30
     99a:	3f 83       	std	Y+7, r19	; 0x07
     99c:	2e 83       	std	Y+6, r18	; 0x06
     99e:	9d 83       	std	Y+5, r25	; 0x05
     9a0:	8c 83       	std	Y+4, r24	; 0x04
     9a2:	8e 81       	ldd	r24, Y+6	; 0x06
     9a4:	9f 81       	ldd	r25, Y+7	; 0x07
     9a6:	9c 01       	movw	r18, r24
     9a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ac:	fc 01       	movw	r30, r24
     9ae:	31 8b       	std	Z+17, r19	; 0x11
     9b0:	20 8b       	std	Z+16, r18	; 0x10
     9b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	80 57       	subi	r24, 0x70	; 112
     9ba:	9f 4f       	sbci	r25, 0xFF	; 255
     9bc:	99 87       	std	Y+9, r25	; 0x09
     9be:	88 87       	std	Y+8, r24	; 0x08
     9c0:	88 85       	ldd	r24, Y+8	; 0x08
     9c2:	99 85       	ldd	r25, Y+9	; 0x09
     9c4:	fc 01       	movw	r30, r24
     9c6:	84 91       	lpm	r24, Z
     9c8:	8a 87       	std	Y+10, r24	; 0x0a
     9ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     9cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ce:	2a 85       	ldd	r18, Y+10	; 0x0a
     9d0:	fc 01       	movw	r30, r24
     9d2:	22 8b       	std	Z+18, r18	; 0x12
     9d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9d8:	fc 01       	movw	r30, r24
     9da:	82 81       	ldd	r24, Z+2	; 0x02
     9dc:	93 81       	ldd	r25, Z+3	; 0x03
     9de:	0e 94 66 0a 	call	0x14cc	; 0x14cc <malloc>
     9e2:	9c 01       	movw	r18, r24
     9e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e8:	fc 01       	movw	r30, r24
     9ea:	37 83       	std	Z+7, r19	; 0x07
     9ec:	26 83       	std	Z+6, r18	; 0x06
     9ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f2:	fc 01       	movw	r30, r24
     9f4:	86 81       	ldd	r24, Z+6	; 0x06
     9f6:	97 81       	ldd	r25, Z+7	; 0x07
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f4       	brne	.+2      	; 0xa00 <_ZN17Adafruit_NeoPixelC1Ejhh+0x100>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	22 23       	and	r18, r18
     a02:	79 f0       	breq	.+30     	; 0xa22 <_ZN17Adafruit_NeoPixelC1Ejhh+0x122>
     a04:	8b 85       	ldd	r24, Y+11	; 0x0b
     a06:	9c 85       	ldd	r25, Y+12	; 0x0c
     a08:	fc 01       	movw	r30, r24
     a0a:	22 81       	ldd	r18, Z+2	; 0x02
     a0c:	33 81       	ldd	r19, Z+3	; 0x03
     a0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a10:	9c 85       	ldd	r25, Y+12	; 0x0c
     a12:	fc 01       	movw	r30, r24
     a14:	86 81       	ldd	r24, Z+6	; 0x06
     a16:	97 81       	ldd	r25, Z+7	; 0x07
     a18:	a9 01       	movw	r20, r18
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	0e 94 93 0b 	call	0x1726	; 0x1726 <memset>
     a22:	88 89       	ldd	r24, Y+16	; 0x10
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	81 70       	andi	r24, 0x01	; 1
     a2a:	99 27       	eor	r25, r25
     a2c:	89 2b       	or	r24, r25
     a2e:	79 f0       	breq	.+30     	; 0xa4e <_ZN17Adafruit_NeoPixelC1Ejhh+0x14e>
     a30:	8b 85       	ldd	r24, Y+11	; 0x0b
     a32:	9c 85       	ldd	r25, Y+12	; 0x0c
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	fc 01       	movw	r30, r24
     a38:	20 87       	std	Z+8, r18	; 0x08
     a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a3e:	fc 01       	movw	r30, r24
     a40:	11 86       	std	Z+9, r1	; 0x09
     a42:	8b 85       	ldd	r24, Y+11	; 0x0b
     a44:	9c 85       	ldd	r25, Y+12	; 0x0c
     a46:	22 e0       	ldi	r18, 0x02	; 2
     a48:	fc 01       	movw	r30, r24
     a4a:	22 87       	std	Z+10, r18	; 0x0a
     a4c:	24 c0       	rjmp	.+72     	; 0xa96 <_ZN17Adafruit_NeoPixelC1Ejhh+0x196>
     a4e:	88 89       	ldd	r24, Y+16	; 0x10
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	84 70       	andi	r24, 0x04	; 4
     a56:	99 27       	eor	r25, r25
     a58:	89 2b       	or	r24, r25
     a5a:	79 f0       	breq	.+30     	; 0xa7a <_ZN17Adafruit_NeoPixelC1Ejhh+0x17a>
     a5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	fc 01       	movw	r30, r24
     a64:	20 87       	std	Z+8, r18	; 0x08
     a66:	8b 85       	ldd	r24, Y+11	; 0x0b
     a68:	9c 85       	ldd	r25, Y+12	; 0x0c
     a6a:	22 e0       	ldi	r18, 0x02	; 2
     a6c:	fc 01       	movw	r30, r24
     a6e:	21 87       	std	Z+9, r18	; 0x09
     a70:	8b 85       	ldd	r24, Y+11	; 0x0b
     a72:	9c 85       	ldd	r25, Y+12	; 0x0c
     a74:	fc 01       	movw	r30, r24
     a76:	12 86       	std	Z+10, r1	; 0x0a
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <_ZN17Adafruit_NeoPixelC1Ejhh+0x196>
     a7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a7e:	fc 01       	movw	r30, r24
     a80:	10 86       	std	Z+8, r1	; 0x08
     a82:	8b 85       	ldd	r24, Y+11	; 0x0b
     a84:	9c 85       	ldd	r25, Y+12	; 0x0c
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	fc 01       	movw	r30, r24
     a8a:	21 87       	std	Z+9, r18	; 0x09
     a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a90:	22 e0       	ldi	r18, 0x02	; 2
     a92:	fc 01       	movw	r30, r24
     a94:	22 87       	std	Z+10, r18	; 0x0a
     a96:	60 96       	adiw	r28, 0x10	; 16
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <_ZN17Adafruit_NeoPixelD1Ev>:
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <_ZN17Adafruit_NeoPixelD1Ev+0x6>
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	9a 83       	std	Y+2, r25	; 0x02
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	fc 01       	movw	r30, r24
     abc:	86 81       	ldd	r24, Z+6	; 0x06
     abe:	97 81       	ldd	r25, Z+7	; 0x07
     ac0:	89 2b       	or	r24, r25
     ac2:	39 f0       	breq	.+14     	; 0xad2 <_ZN17Adafruit_NeoPixelD1Ev+0x2a>
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	fc 01       	movw	r30, r24
     aca:	86 81       	ldd	r24, Z+6	; 0x06
     acc:	97 81       	ldd	r25, Z+7	; 0x07
     ace:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <free>
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	fc 01       	movw	r30, r24
     ad8:	84 81       	ldd	r24, Z+4	; 0x04
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	0e 94 49 08 	call	0x1092	; 0x1092 <pinMode>
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <_ZN17Adafruit_NeoPixel5beginEv>:
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <_ZN17Adafruit_NeoPixel5beginEv+0x6>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	9a 83       	std	Y+2, r25	; 0x02
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	fc 01       	movw	r30, r24
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	0e 94 49 08 	call	0x1092	; 0x1092 <pinMode>
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	fc 01       	movw	r30, r24
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 70 09 	call	0x12e0	; 0x12e0 <digitalWrite>
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <_ZN17Adafruit_NeoPixel4showEv>:
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	60 97       	sbiw	r28, 0x10	; 16
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	9d 87       	std	Y+13, r25	; 0x0d
     b3c:	8c 87       	std	Y+12, r24	; 0x0c
     b3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b40:	9d 85       	ldd	r25, Y+13	; 0x0d
     b42:	dc 01       	movw	r26, r24
     b44:	16 96       	adiw	r26, 0x06	; 6
     b46:	8d 91       	ld	r24, X+
     b48:	9c 91       	ld	r25, X
     b4a:	17 97       	sbiw	r26, 0x07	; 7
     b4c:	89 2b       	or	r24, r25
     b4e:	09 f4       	brne	.+2      	; 0xb52 <_ZN17Adafruit_NeoPixel4showEv+0x34>
     b50:	16 c1       	rjmp	.+556    	; 0xd7e <nextbyte40+0x44>
     b52:	00 00       	nop
     b54:	0e 94 25 03 	call	0x64a	; 0x64a <micros>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b5e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b60:	fc 01       	movw	r30, r24
     b62:	84 85       	ldd	r24, Z+12	; 0x0c
     b64:	95 85       	ldd	r25, Z+13	; 0x0d
     b66:	a6 85       	ldd	r26, Z+14	; 0x0e
     b68:	b7 85       	ldd	r27, Z+15	; 0x0f
     b6a:	79 01       	movw	r14, r18
     b6c:	8a 01       	movw	r16, r20
     b6e:	e8 1a       	sub	r14, r24
     b70:	f9 0a       	sbc	r15, r25
     b72:	0a 0b       	sbc	r16, r26
     b74:	1b 0b       	sbc	r17, r27
     b76:	d8 01       	movw	r26, r16
     b78:	c7 01       	movw	r24, r14
     b7a:	21 e0       	ldi	r18, 0x01	; 1
     b7c:	c2 97       	sbiw	r24, 0x32	; 50
     b7e:	a1 05       	cpc	r26, r1
     b80:	b1 05       	cpc	r27, r1
     b82:	08 f0       	brcs	.+2      	; 0xb86 <_ZN17Adafruit_NeoPixel4showEv+0x68>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	22 23       	and	r18, r18
     b88:	29 f7       	brne	.-54     	; 0xb54 <_ZN17Adafruit_NeoPixel4showEv+0x36>
     b8a:	f8 94       	cli
     b8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b90:	dc 01       	movw	r26, r24
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	9c 83       	std	Y+4, r25	; 0x04
     b9c:	8b 83       	std	Y+3, r24	; 0x03
     b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba2:	fc 01       	movw	r30, r24
     ba4:	86 81       	ldd	r24, Z+6	; 0x06
     ba6:	97 81       	ldd	r25, Z+7	; 0x07
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	9c 01       	movw	r18, r24
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	3a 83       	std	Y+2, r19	; 0x02
     bb8:	29 83       	std	Y+1, r18	; 0x01
     bba:	dc 01       	movw	r26, r24
     bbc:	8c 91       	ld	r24, X
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc4:	fc 01       	movw	r30, r24
     bc6:	83 85       	ldd	r24, Z+11	; 0x0b
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	82 70       	andi	r24, 0x02	; 2
     bce:	99 27       	eor	r25, r25
     bd0:	89 2b       	or	r24, r25
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
     bd4:	5f c0       	rjmp	.+190    	; 0xc94 <nextbyte20+0x2c>
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	dc 01       	movw	r26, r24
     bdc:	50 96       	adiw	r26, 0x10	; 16
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	51 97       	sbiw	r26, 0x11	; 17
     be4:	fc 01       	movw	r30, r24
     be6:	20 81       	ld	r18, Z
     be8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bea:	9d 85       	ldd	r25, Y+13	; 0x0d
     bec:	dc 01       	movw	r26, r24
     bee:	52 96       	adiw	r26, 0x12	; 18
     bf0:	8c 91       	ld	r24, X
     bf2:	82 2b       	or	r24, r18
     bf4:	8e 83       	std	Y+6, r24	; 0x06
     bf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 89       	ldd	r24, Z+16	; 0x10
     bfe:	91 89       	ldd	r25, Z+17	; 0x11
     c00:	dc 01       	movw	r26, r24
     c02:	8c 91       	ld	r24, X
     c04:	28 2f       	mov	r18, r24
     c06:	8c 85       	ldd	r24, Y+12	; 0x0c
     c08:	9d 85       	ldd	r25, Y+13	; 0x0d
     c0a:	fc 01       	movw	r30, r24
     c0c:	82 89       	ldd	r24, Z+18	; 0x12
     c0e:	80 95       	com	r24
     c10:	82 23       	and	r24, r18
     c12:	8f 83       	std	Y+7, r24	; 0x07
     c14:	8f 81       	ldd	r24, Y+7	; 0x07
     c16:	88 87       	std	Y+8, r24	; 0x08
     c18:	88 e0       	ldi	r24, 0x08	; 8
     c1a:	89 87       	std	Y+9, r24	; 0x09
     c1c:	fe 81       	ldd	r31, Y+6	; 0x06
     c1e:	fe 87       	std	Y+14, r31	; 0x0e
     c20:	ef 80       	ldd	r14, Y+7	; 0x07
     c22:	ef 86       	std	Y+15, r14	; 0x0f
     c24:	8c 85       	ldd	r24, Y+12	; 0x0c
     c26:	9d 85       	ldd	r25, Y+13	; 0x0d
     c28:	dc 01       	movw	r26, r24
     c2a:	50 96       	adiw	r26, 0x10	; 16
     c2c:	2d 91       	ld	r18, X+
     c2e:	3c 91       	ld	r19, X
     c30:	51 97       	sbiw	r26, 0x11	; 17
     c32:	ed 81       	ldd	r30, Y+5	; 0x05
     c34:	79 85       	ldd	r23, Y+9	; 0x09
     c36:	68 85       	ldd	r22, Y+8	; 0x08
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	9c 81       	ldd	r25, Y+4	; 0x04
     c3c:	49 81       	ldd	r20, Y+1	; 0x01
     c3e:	5a 81       	ldd	r21, Y+2	; 0x02
     c40:	e8 8b       	std	Y+16, r30	; 0x10
     c42:	f9 01       	movw	r30, r18
     c44:	e8 88       	ldd	r14, Y+16	; 0x10
     c46:	da 01       	movw	r26, r20
     c48:	fe 84       	ldd	r15, Y+14	; 0x0e
     c4a:	0f 85       	ldd	r16, Y+15	; 0x0f

00000c4c <head20>:
     c4c:	f0 82       	st	Z, r15
     c4e:	e7 fc       	sbrc	r14, 7
     c50:	6f 2d       	mov	r22, r15
     c52:	7a 95       	dec	r23
     c54:	60 83       	st	Z, r22
     c56:	60 2f       	mov	r22, r16
     c58:	39 f0       	breq	.+14     	; 0xc68 <nextbyte20>
     c5a:	ee 1c       	adc	r14, r14
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <head20+0x12>
     c5e:	00 00       	nop
     c60:	00 83       	st	Z, r16
     c62:	00 00       	nop
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <head20+0x1a>
     c66:	f2 cf       	rjmp	.-28     	; 0xc4c <head20>

00000c68 <nextbyte20>:
     c68:	78 e0       	ldi	r23, 0x08	; 8
     c6a:	ed 90       	ld	r14, X+
     c6c:	00 83       	st	Z, r16
     c6e:	00 00       	nop
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	61 f7       	brne	.-40     	; 0xc4c <head20>
     c74:	e8 8a       	std	Y+16, r14	; 0x10
     c76:	9f 01       	movw	r18, r30
     c78:	4c 85       	ldd	r20, Y+12	; 0x0c
     c7a:	5d 85       	ldd	r21, Y+13	; 0x0d
     c7c:	da 01       	movw	r26, r20
     c7e:	51 96       	adiw	r26, 0x11	; 17
     c80:	3c 93       	st	X, r19
     c82:	2e 93       	st	-X, r18
     c84:	50 97       	sbiw	r26, 0x10	; 16
     c86:	b8 89       	ldd	r27, Y+16	; 0x10
     c88:	bd 83       	std	Y+5, r27	; 0x05
     c8a:	79 87       	std	Y+9, r23	; 0x09
     c8c:	68 87       	std	Y+8, r22	; 0x08
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
     c92:	69 c0       	rjmp	.+210    	; 0xd66 <nextbyte40+0x2c>
     c94:	8c 85       	ldd	r24, Y+12	; 0x0c
     c96:	9d 85       	ldd	r25, Y+13	; 0x0d
     c98:	fc 01       	movw	r30, r24
     c9a:	80 89       	ldd	r24, Z+16	; 0x10
     c9c:	91 89       	ldd	r25, Z+17	; 0x11
     c9e:	dc 01       	movw	r26, r24
     ca0:	2c 91       	ld	r18, X
     ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca6:	fc 01       	movw	r30, r24
     ca8:	82 89       	ldd	r24, Z+18	; 0x12
     caa:	82 2b       	or	r24, r18
     cac:	8e 83       	std	Y+6, r24	; 0x06
     cae:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb2:	dc 01       	movw	r26, r24
     cb4:	50 96       	adiw	r26, 0x10	; 16
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	51 97       	sbiw	r26, 0x11	; 17
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	28 2f       	mov	r18, r24
     cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc6:	dc 01       	movw	r26, r24
     cc8:	52 96       	adiw	r26, 0x12	; 18
     cca:	8c 91       	ld	r24, X
     ccc:	80 95       	com	r24
     cce:	82 23       	and	r24, r18
     cd0:	8f 83       	std	Y+7, r24	; 0x07
     cd2:	8f 81       	ldd	r24, Y+7	; 0x07
     cd4:	8a 87       	std	Y+10, r24	; 0x0a
     cd6:	88 e0       	ldi	r24, 0x08	; 8
     cd8:	8b 87       	std	Y+11, r24	; 0x0b
     cda:	be 81       	ldd	r27, Y+6	; 0x06
     cdc:	be 87       	std	Y+14, r27	; 0x0e
     cde:	ef 81       	ldd	r30, Y+7	; 0x07
     ce0:	ef 87       	std	Y+15, r30	; 0x0f
     ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce6:	dc 01       	movw	r26, r24
     ce8:	50 96       	adiw	r26, 0x10	; 16
     cea:	2d 91       	ld	r18, X+
     cec:	3c 91       	ld	r19, X
     cee:	51 97       	sbiw	r26, 0x11	; 17
     cf0:	ed 81       	ldd	r30, Y+5	; 0x05
     cf2:	7b 85       	ldd	r23, Y+11	; 0x0b
     cf4:	6a 85       	ldd	r22, Y+10	; 0x0a
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	49 81       	ldd	r20, Y+1	; 0x01
     cfc:	5a 81       	ldd	r21, Y+2	; 0x02
     cfe:	e8 8b       	std	Y+16, r30	; 0x10
     d00:	f9 01       	movw	r30, r18
     d02:	e8 88       	ldd	r14, Y+16	; 0x10
     d04:	da 01       	movw	r26, r20
     d06:	fe 84       	ldd	r15, Y+14	; 0x0e
     d08:	0f 85       	ldd	r16, Y+15	; 0x0f

00000d0a <head40>:
     d0a:	f0 82       	st	Z, r15
     d0c:	e7 fc       	sbrc	r14, 7
     d0e:	6f 2d       	mov	r22, r15
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <head40+0x8>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <head40+0xa>
     d14:	60 83       	st	Z, r22
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <head40+0xe>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <head40+0x10>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <head40+0x12>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <head40+0x14>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <head40+0x16>
     d20:	00 83       	st	Z, r16
     d22:	00 00       	nop
     d24:	60 2f       	mov	r22, r16
     d26:	7a 95       	dec	r23
     d28:	41 f0       	breq	.+16     	; 0xd3a <nextbyte40>
     d2a:	ee 1c       	adc	r14, r14
     d2c:	00 00       	nop
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <head40+0x26>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <head40+0x28>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <head40+0x2a>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <head40+0x2c>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <head40+0x2e>
     d38:	e8 cf       	rjmp	.-48     	; 0xd0a <head40>

00000d3a <nextbyte40>:
     d3a:	78 e0       	ldi	r23, 0x08	; 8
     d3c:	ed 90       	ld	r14, X+
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <nextbyte40+0x6>
     d40:	00 83       	st	Z, r16
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <nextbyte40+0xa>
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	09 f7       	brne	.-62     	; 0xd0a <head40>
     d48:	e8 8a       	std	Y+16, r14	; 0x10
     d4a:	9f 01       	movw	r18, r30
     d4c:	4c 85       	ldd	r20, Y+12	; 0x0c
     d4e:	5d 85       	ldd	r21, Y+13	; 0x0d
     d50:	da 01       	movw	r26, r20
     d52:	51 96       	adiw	r26, 0x11	; 17
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	50 97       	sbiw	r26, 0x10	; 16
     d5a:	b8 89       	ldd	r27, Y+16	; 0x10
     d5c:	bd 83       	std	Y+5, r27	; 0x05
     d5e:	7b 87       	std	Y+11, r23	; 0x0b
     d60:	6a 87       	std	Y+10, r22	; 0x0a
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
     d66:	78 94       	sei
     d68:	0e 94 25 03 	call	0x64a	; 0x64a <micros>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	2c 85       	ldd	r18, Y+12	; 0x0c
     d72:	3d 85       	ldd	r19, Y+13	; 0x0d
     d74:	f9 01       	movw	r30, r18
     d76:	84 87       	std	Z+12, r24	; 0x0c
     d78:	95 87       	std	Z+13, r25	; 0x0d
     d7a:	a6 87       	std	Z+14, r26	; 0x0e
     d7c:	b7 87       	std	Z+15, r27	; 0x0f
     d7e:	60 96       	adiw	r28, 0x10	; 16
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	08 95       	ret

00000d98 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	2d 97       	sbiw	r28, 0x0d	; 13
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	9f 83       	std	Y+7, r25	; 0x07
     dae:	8e 83       	std	Y+6, r24	; 0x06
     db0:	79 87       	std	Y+9, r23	; 0x09
     db2:	68 87       	std	Y+8, r22	; 0x08
     db4:	2a 87       	std	Y+10, r18	; 0x0a
     db6:	3b 87       	std	Y+11, r19	; 0x0b
     db8:	4c 87       	std	Y+12, r20	; 0x0c
     dba:	5d 87       	std	Y+13, r21	; 0x0d
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
     dbe:	9f 81       	ldd	r25, Y+7	; 0x07
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 81       	ld	r18, Z
     dc4:	31 81       	ldd	r19, Z+1	; 0x01
     dc6:	88 85       	ldd	r24, Y+8	; 0x08
     dc8:	99 85       	ldd	r25, Y+9	; 0x09
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x3a>
     dd0:	8c c0       	rjmp	.+280    	; 0xeea <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x152>
     dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd6:	ac 85       	ldd	r26, Y+12	; 0x0c
     dd8:	bd 85       	ldd	r27, Y+13	; 0x0d
     dda:	cd 01       	movw	r24, r26
     ddc:	aa 27       	eor	r26, r26
     dde:	bb 27       	eor	r27, r27
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	8a 85       	ldd	r24, Y+10	; 0x0a
     de4:	9b 85       	ldd	r25, Y+11	; 0x0b
     de6:	ac 85       	ldd	r26, Y+12	; 0x0c
     de8:	bd 85       	ldd	r27, Y+13	; 0x0d
     dea:	89 2f       	mov	r24, r25
     dec:	9a 2f       	mov	r25, r26
     dee:	ab 2f       	mov	r26, r27
     df0:	bb 27       	eor	r27, r27
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	8a 85       	ldd	r24, Y+10	; 0x0a
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	8e 81       	ldd	r24, Y+6	; 0x06
     dfa:	9f 81       	ldd	r25, Y+7	; 0x07
     dfc:	fc 01       	movw	r30, r24
     dfe:	85 81       	ldd	r24, Z+5	; 0x05
     e00:	88 23       	and	r24, r24
     e02:	e1 f1       	breq	.+120    	; 0xe7c <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xe4>
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	48 2f       	mov	r20, r24
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	8e 81       	ldd	r24, Y+6	; 0x06
     e0c:	9f 81       	ldd	r25, Y+7	; 0x07
     e0e:	fc 01       	movw	r30, r24
     e10:	85 81       	ldd	r24, Z+5	; 0x05
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	42 9f       	mul	r20, r18
     e18:	c0 01       	movw	r24, r0
     e1a:	43 9f       	mul	r20, r19
     e1c:	90 0d       	add	r25, r0
     e1e:	52 9f       	mul	r21, r18
     e20:	90 0d       	add	r25, r0
     e22:	11 24       	eor	r1, r1
     e24:	89 2f       	mov	r24, r25
     e26:	99 0f       	add	r25, r25
     e28:	99 0b       	sbc	r25, r25
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	48 2f       	mov	r20, r24
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	9f 81       	ldd	r25, Y+7	; 0x07
     e36:	fc 01       	movw	r30, r24
     e38:	85 81       	ldd	r24, Z+5	; 0x05
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	42 9f       	mul	r20, r18
     e40:	c0 01       	movw	r24, r0
     e42:	43 9f       	mul	r20, r19
     e44:	90 0d       	add	r25, r0
     e46:	52 9f       	mul	r21, r18
     e48:	90 0d       	add	r25, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	89 2f       	mov	r24, r25
     e4e:	99 0f       	add	r25, r25
     e50:	99 0b       	sbc	r25, r25
     e52:	8a 83       	std	Y+2, r24	; 0x02
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	48 2f       	mov	r20, r24
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	fc 01       	movw	r30, r24
     e60:	85 81       	ldd	r24, Z+5	; 0x05
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	42 9f       	mul	r20, r18
     e68:	c0 01       	movw	r24, r0
     e6a:	43 9f       	mul	r20, r19
     e6c:	90 0d       	add	r25, r0
     e6e:	52 9f       	mul	r21, r18
     e70:	90 0d       	add	r25, r0
     e72:	11 24       	eor	r1, r1
     e74:	89 2f       	mov	r24, r25
     e76:	99 0f       	add	r25, r25
     e78:	99 0b       	sbc	r25, r25
     e7a:	8b 83       	std	Y+3, r24	; 0x03
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	fc 01       	movw	r30, r24
     e82:	46 81       	ldd	r20, Z+6	; 0x06
     e84:	57 81       	ldd	r21, Z+7	; 0x07
     e86:	28 85       	ldd	r18, Y+8	; 0x08
     e88:	39 85       	ldd	r19, Y+9	; 0x09
     e8a:	c9 01       	movw	r24, r18
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	9d 83       	std	Y+5, r25	; 0x05
     e9a:	8c 83       	std	Y+4, r24	; 0x04
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 85       	ldd	r24, Z+8	; 0x08
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	2c 81       	ldd	r18, Y+4	; 0x04
     eaa:	3d 81       	ldd	r19, Y+5	; 0x05
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 83       	st	Z, r18
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	9f 81       	ldd	r25, Y+7	; 0x07
     eba:	fc 01       	movw	r30, r24
     ebc:	81 85       	ldd	r24, Z+9	; 0x09
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	2a 81       	ldd	r18, Y+2	; 0x02
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	fc 01       	movw	r30, r24
     ed6:	82 85       	ldd	r24, Z+10	; 0x0a
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	2b 81       	ldd	r18, Y+3	; 0x03
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
     eea:	2d 96       	adiw	r28, 0x0d	; 13
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_ZN17Adafruit_NeoPixel5ColorEhhh>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	00 d0       	rcall	.+0      	; 0xf02 <_ZN17Adafruit_NeoPixel5ColorEhhh+0x6>
     f02:	1f 92       	push	r1
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	6a 83       	std	Y+2, r22	; 0x02
     f0c:	4b 83       	std	Y+3, r20	; 0x03
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ac 01       	movw	r20, r24
     f1a:	33 27       	eor	r19, r19
     f1c:	22 27       	eor	r18, r18
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e0       	ldi	r26, 0x00	; 0
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ba 2f       	mov	r27, r26
     f2a:	a9 2f       	mov	r26, r25
     f2c:	98 2f       	mov	r25, r24
     f2e:	88 27       	eor	r24, r24
     f30:	28 2b       	or	r18, r24
     f32:	39 2b       	or	r19, r25
     f34:	4a 2b       	or	r20, r26
     f36:	5b 2b       	or	r21, r27
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	82 2b       	or	r24, r18
     f44:	93 2b       	or	r25, r19
     f46:	a4 2b       	or	r26, r20
     f48:	b5 2b       	or	r27, r21
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <_ZNK17Adafruit_NeoPixel9numPixelsEv>:

uint16_t Adafruit_NeoPixel::numPixels(void) const {
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <_ZNK17Adafruit_NeoPixel9numPixelsEv+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
  return numLEDs;
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	fc 01       	movw	r30, r24
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	62 97       	sbiw	r28, 0x12	; 18
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	9b 87       	std	Y+11, r25	; 0x0b
     f92:	8a 87       	std	Y+10, r24	; 0x0a
     f94:	6c 87       	std	Y+12, r22	; 0x0c
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
     f96:	8c 85       	ldd	r24, Y+12	; 0x0c
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	8f 83       	std	Y+7, r24	; 0x07
  if(newBrightness != brightness) { // Compare against prior value
     f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa0:	fc 01       	movw	r30, r24
     fa2:	95 81       	ldd	r25, Z+5	; 0x05
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	98 17       	cp	r25, r24
     fa8:	09 f4       	brne	.+2      	; 0xfac <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
     faa:	6a c0       	rjmp	.+212    	; 0x1080 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x104>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	fc 01       	movw	r30, r24
     fb2:	86 81       	ldd	r24, Z+6	; 0x06
     fb4:	97 81       	ldd	r25, Z+7	; 0x07
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
             oldBrightness = brightness - 1; // De-wrap old brightness value
     fba:	8a 85       	ldd	r24, Y+10	; 0x0a
     fbc:	9b 85       	ldd	r25, Y+11	; 0x0b
     fbe:	fc 01       	movw	r30, r24
     fc0:	85 81       	ldd	r24, Z+5	; 0x05
     fc2:	81 50       	subi	r24, 0x01	; 1
     fc4:	88 87       	std	Y+8, r24	; 0x08
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
     fc6:	88 85       	ldd	r24, Y+8	; 0x08
     fc8:	88 23       	and	r24, r24
     fca:	19 f4       	brne	.+6      	; 0xfd2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x56>
     fcc:	1c 82       	std	Y+4, r1	; 0x04
     fce:	1b 82       	std	Y+3, r1	; 0x03
     fd0:	24 c0       	rjmp	.+72     	; 0x101a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x9e>
    else if(b == 255) scale = 65535 / oldBrightness;
     fd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	91 f4       	brne	.+36     	; 0xffc <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x80>
     fd8:	88 85       	ldd	r24, Y+8	; 0x08
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	9f ef       	ldi	r25, 0xFF	; 255
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 1f 0a 	call	0x143e	; 0x143e <__divmodsi4>
     ff2:	da 01       	movw	r26, r20
     ff4:	c9 01       	movw	r24, r18
     ff6:	9c 83       	std	Y+4, r25	; 0x04
     ff8:	8b 83       	std	Y+3, r24	; 0x03
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x9e>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	98 2f       	mov	r25, r24
    1004:	88 27       	eor	r24, r24
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	28 85       	ldd	r18, Y+8	; 0x08
    100a:	22 2f       	mov	r18, r18
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	b9 01       	movw	r22, r18
    1010:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__udivmodhi4>
    1014:	cb 01       	movw	r24, r22
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	8b 83       	std	Y+3, r24	; 0x03
    for(uint16_t i=0; i<numBytes; i++) {
    101a:	1e 82       	std	Y+6, r1	; 0x06
    101c:	1d 82       	std	Y+5, r1	; 0x05
    101e:	21 c0       	rjmp	.+66     	; 0x1062 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0xe6>
      c      = *ptr;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	fc 01       	movw	r30, r24
    1026:	80 81       	ld	r24, Z
    1028:	89 87       	std	Y+9, r24	; 0x09
      *ptr++ = (c * scale) >> 8;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	9c 01       	movw	r18, r24
    1030:	2f 5f       	subi	r18, 0xFF	; 255
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	3a 83       	std	Y+2, r19	; 0x02
    1036:	29 83       	std	Y+1, r18	; 0x01
    1038:	29 85       	ldd	r18, Y+9	; 0x09
    103a:	62 2f       	mov	r22, r18
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	4b 81       	ldd	r20, Y+3	; 0x03
    1040:	5c 81       	ldd	r21, Y+4	; 0x04
    1042:	64 9f       	mul	r22, r20
    1044:	90 01       	movw	r18, r0
    1046:	65 9f       	mul	r22, r21
    1048:	30 0d       	add	r19, r0
    104a:	74 9f       	mul	r23, r20
    104c:	30 0d       	add	r19, r0
    104e:	11 24       	eor	r1, r1
    1050:	23 2f       	mov	r18, r19
    1052:	33 27       	eor	r19, r19
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	8a 85       	ldd	r24, Y+10	; 0x0a
    1064:	9b 85       	ldd	r25, Y+11	; 0x0b
    1066:	fc 01       	movw	r30, r24
    1068:	22 81       	ldd	r18, Z+2	; 0x02
    106a:	33 81       	ldd	r19, Z+3	; 0x03
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	82 17       	cp	r24, r18
    1072:	93 07       	cpc	r25, r19
    1074:	a8 f2       	brcs	.-86     	; 0x1020 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0xa4>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    1076:	8a 85       	ldd	r24, Y+10	; 0x0a
    1078:	9b 85       	ldd	r25, Y+11	; 0x0b
    107a:	2f 81       	ldd	r18, Y+7	; 0x07
    107c:	fc 01       	movw	r30, r24
    107e:	25 83       	std	Z+5, r18	; 0x05
  }
}
    1080:	62 96       	adiw	r28, 0x12	; 18
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <pinMode>:
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	69 97       	sbiw	r28, 0x19	; 25
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	88 8f       	std	Y+24, r24	; 0x18
    10a8:	69 8f       	std	Y+25, r22	; 0x19
    10aa:	88 8d       	ldd	r24, Y+24	; 0x18
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	80 57       	subi	r24, 0x70	; 112
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	fc 01       	movw	r30, r24
    10be:	84 91       	lpm	r24, Z
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	8c 83       	std	Y+4, r24	; 0x04
    10c6:	88 8d       	ldd	r24, Y+24	; 0x18
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	84 58       	subi	r24, 0x84	; 132
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	fc 01       	movw	r30, r24
    10da:	84 91       	lpm	r24, Z
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	8f 81       	ldd	r24, Y+7	; 0x07
    10e0:	88 87       	std	Y+8, r24	; 0x08
    10e2:	88 85       	ldd	r24, Y+8	; 0x08
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <pinMode+0x58>
    10e8:	94 c0       	rjmp	.+296    	; 0x1212 <pinMode+0x180>
    10ea:	88 85       	ldd	r24, Y+8	; 0x08
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	88 59       	subi	r24, 0x98	; 152
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	9a 87       	std	Y+10, r25	; 0x0a
    10fa:	89 87       	std	Y+9, r24	; 0x09
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	fc 01       	movw	r30, r24
    1102:	25 91       	lpm	r18, Z+
    1104:	34 91       	lpm	r19, Z
    1106:	cf 01       	movw	r24, r30
    1108:	3c 87       	std	Y+12, r19	; 0x0c
    110a:	2b 87       	std	Y+11, r18	; 0x0b
    110c:	9a 87       	std	Y+10, r25	; 0x0a
    110e:	89 87       	std	Y+9, r24	; 0x09
    1110:	8b 85       	ldd	r24, Y+11	; 0x0b
    1112:	9c 85       	ldd	r25, Y+12	; 0x0c
    1114:	9e 87       	std	Y+14, r25	; 0x0e
    1116:	8d 87       	std	Y+13, r24	; 0x0d
    1118:	88 85       	ldd	r24, Y+8	; 0x08
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	8e 58       	subi	r24, 0x8E	; 142
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	98 8b       	std	Y+16, r25	; 0x10
    1128:	8f 87       	std	Y+15, r24	; 0x0f
    112a:	8f 85       	ldd	r24, Y+15	; 0x0f
    112c:	98 89       	ldd	r25, Y+16	; 0x10
    112e:	fc 01       	movw	r30, r24
    1130:	25 91       	lpm	r18, Z+
    1132:	34 91       	lpm	r19, Z
    1134:	cf 01       	movw	r24, r30
    1136:	3a 8b       	std	Y+18, r19	; 0x12
    1138:	29 8b       	std	Y+17, r18	; 0x11
    113a:	98 8b       	std	Y+16, r25	; 0x10
    113c:	8f 87       	std	Y+15, r24	; 0x0f
    113e:	89 89       	ldd	r24, Y+17	; 0x11
    1140:	9a 89       	ldd	r25, Y+18	; 0x12
    1142:	9c 8b       	std	Y+20, r25	; 0x14
    1144:	8b 8b       	std	Y+19, r24	; 0x13
    1146:	89 8d       	ldd	r24, Y+25	; 0x19
    1148:	88 23       	and	r24, r24
    114a:	31 f5       	brne	.+76     	; 0x1198 <pinMode+0x106>
    114c:	8f e5       	ldi	r24, 0x5F	; 95
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	fc 01       	movw	r30, r24
    1152:	80 81       	ld	r24, Z
    1154:	8d 8b       	std	Y+21, r24	; 0x15
    1156:	f8 94       	cli
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	fc 01       	movw	r30, r24
    115e:	80 81       	ld	r24, Z
    1160:	98 2f       	mov	r25, r24
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	80 95       	com	r24
    1166:	89 23       	and	r24, r25
    1168:	28 2f       	mov	r18, r24
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
    1172:	8b 89       	ldd	r24, Y+19	; 0x13
    1174:	9c 89       	ldd	r25, Y+20	; 0x14
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	98 2f       	mov	r25, r24
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	80 95       	com	r24
    1180:	89 23       	and	r24, r25
    1182:	28 2f       	mov	r18, r24
    1184:	8b 89       	ldd	r24, Y+19	; 0x13
    1186:	9c 89       	ldd	r25, Y+20	; 0x14
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
    118c:	8f e5       	ldi	r24, 0x5F	; 95
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	2d 89       	ldd	r18, Y+21	; 0x15
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
    1196:	3d c0       	rjmp	.+122    	; 0x1212 <pinMode+0x180>
    1198:	89 8d       	ldd	r24, Y+25	; 0x19
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	21 f5       	brne	.+72     	; 0x11e6 <pinMode+0x154>
    119e:	8f e5       	ldi	r24, 0x5F	; 95
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	8e 8b       	std	Y+22, r24	; 0x16
    11a8:	f8 94       	cli
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	98 2f       	mov	r25, r24
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	80 95       	com	r24
    11b8:	89 23       	and	r24, r25
    11ba:	28 2f       	mov	r18, r24
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
    11c4:	8b 89       	ldd	r24, Y+19	; 0x13
    11c6:	9c 89       	ldd	r25, Y+20	; 0x14
    11c8:	fc 01       	movw	r30, r24
    11ca:	90 81       	ld	r25, Z
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	29 2f       	mov	r18, r25
    11d0:	28 2b       	or	r18, r24
    11d2:	8b 89       	ldd	r24, Y+19	; 0x13
    11d4:	9c 89       	ldd	r25, Y+20	; 0x14
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
    11da:	8f e5       	ldi	r24, 0x5F	; 95
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	2e 89       	ldd	r18, Y+22	; 0x16
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
    11e4:	16 c0       	rjmp	.+44     	; 0x1212 <pinMode+0x180>
    11e6:	8f e5       	ldi	r24, 0x5F	; 95
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 8b       	std	Y+23, r24	; 0x17
    11f0:	f8 94       	cli
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	fc 01       	movw	r30, r24
    11f8:	90 81       	ld	r25, Z
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	29 2f       	mov	r18, r25
    11fe:	28 2b       	or	r18, r24
    1200:	8d 85       	ldd	r24, Y+13	; 0x0d
    1202:	9e 85       	ldd	r25, Y+14	; 0x0e
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
    1208:	8f e5       	ldi	r24, 0x5F	; 95
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	2f 89       	ldd	r18, Y+23	; 0x17
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	69 96       	adiw	r28, 0x19	; 25
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <turnOffPWM>:
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	1f 92       	push	r1
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	91 f0       	breq	.+36     	; 0x1260 <turnOffPWM+0x3c>
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	91 05       	cpc	r25, r1
    1240:	34 f4       	brge	.+12     	; 0x124e <turnOffPWM+0x2a>
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	01 f1       	breq	.+64     	; 0x1288 <turnOffPWM+0x64>
    1248:	02 97       	sbiw	r24, 0x02	; 2
    124a:	41 f1       	breq	.+80     	; 0x129c <turnOffPWM+0x78>
    124c:	45 c0       	rjmp	.+138    	; 0x12d8 <turnOffPWM+0xb4>
    124e:	87 30       	cpi	r24, 0x07	; 7
    1250:	91 05       	cpc	r25, r1
    1252:	71 f1       	breq	.+92     	; 0x12b0 <turnOffPWM+0x8c>
    1254:	88 30       	cpi	r24, 0x08	; 8
    1256:	91 05       	cpc	r25, r1
    1258:	a9 f1       	breq	.+106    	; 0x12c4 <turnOffPWM+0xa0>
    125a:	04 97       	sbiw	r24, 0x04	; 4
    125c:	59 f0       	breq	.+22     	; 0x1274 <turnOffPWM+0x50>
    125e:	3c c0       	rjmp	.+120    	; 0x12d8 <turnOffPWM+0xb4>
    1260:	80 e8       	ldi	r24, 0x80	; 128
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	20 e8       	ldi	r18, 0x80	; 128
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	f9 01       	movw	r30, r18
    126a:	20 81       	ld	r18, Z
    126c:	2f 77       	andi	r18, 0x7F	; 127
    126e:	fc 01       	movw	r30, r24
    1270:	20 83       	st	Z, r18
    1272:	32 c0       	rjmp	.+100    	; 0x12d8 <turnOffPWM+0xb4>
    1274:	80 e8       	ldi	r24, 0x80	; 128
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	20 e8       	ldi	r18, 0x80	; 128
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	f9 01       	movw	r30, r18
    127e:	20 81       	ld	r18, Z
    1280:	2f 7d       	andi	r18, 0xDF	; 223
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
    1286:	28 c0       	rjmp	.+80     	; 0x12d8 <turnOffPWM+0xb4>
    1288:	84 e4       	ldi	r24, 0x44	; 68
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	24 e4       	ldi	r18, 0x44	; 68
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	20 81       	ld	r18, Z
    1294:	2f 77       	andi	r18, 0x7F	; 127
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	1e c0       	rjmp	.+60     	; 0x12d8 <turnOffPWM+0xb4>
    129c:	84 e4       	ldi	r24, 0x44	; 68
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	24 e4       	ldi	r18, 0x44	; 68
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	2f 7d       	andi	r18, 0xDF	; 223
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <turnOffPWM+0xb4>
    12b0:	80 eb       	ldi	r24, 0xB0	; 176
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	20 eb       	ldi	r18, 0xB0	; 176
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	f9 01       	movw	r30, r18
    12ba:	20 81       	ld	r18, Z
    12bc:	2f 77       	andi	r18, 0x7F	; 127
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18
    12c2:	0a c0       	rjmp	.+20     	; 0x12d8 <turnOffPWM+0xb4>
    12c4:	80 eb       	ldi	r24, 0xB0	; 176
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	20 eb       	ldi	r18, 0xB0	; 176
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	2f 7d       	andi	r18, 0xDF	; 223
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	00 00       	nop
    12d8:	0f 90       	pop	r0
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <digitalWrite>:
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	65 97       	sbiw	r28, 0x15	; 21
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	8c 8b       	std	Y+20, r24	; 0x14
    12f6:	6d 8b       	std	Y+21, r22	; 0x15
    12f8:	8c 89       	ldd	r24, Y+20	; 0x14
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	8c 55       	subi	r24, 0x5C	; 92
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	fc 01       	movw	r30, r24
    130c:	84 91       	lpm	r24, Z
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	8c 83       	std	Y+4, r24	; 0x04
    1314:	8c 89       	ldd	r24, Y+20	; 0x14
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	80 57       	subi	r24, 0x70	; 112
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	fc 01       	movw	r30, r24
    1328:	84 91       	lpm	r24, Z
    132a:	8f 83       	std	Y+7, r24	; 0x07
    132c:	8f 81       	ldd	r24, Y+7	; 0x07
    132e:	88 87       	std	Y+8, r24	; 0x08
    1330:	8c 89       	ldd	r24, Y+20	; 0x14
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	84 58       	subi	r24, 0x84	; 132
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	9a 87       	std	Y+10, r25	; 0x0a
    133c:	89 87       	std	Y+9, r24	; 0x09
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	fc 01       	movw	r30, r24
    1344:	84 91       	lpm	r24, Z
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	8b 85       	ldd	r24, Y+11	; 0x0b
    134a:	8c 87       	std	Y+12, r24	; 0x0c
    134c:	8c 85       	ldd	r24, Y+12	; 0x0c
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <digitalWrite+0x74>
    1352:	44 c0       	rjmp	.+136    	; 0x13dc <digitalWrite+0xfc>
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	88 23       	and	r24, r24
    1358:	19 f0       	breq	.+6      	; 0x1360 <digitalWrite+0x80>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	0e 94 12 09 	call	0x1224	; 0x1224 <turnOffPWM>
    1360:	8c 85       	ldd	r24, Y+12	; 0x0c
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	8e 58       	subi	r24, 0x8E	; 142
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	9e 87       	std	Y+14, r25	; 0x0e
    1370:	8d 87       	std	Y+13, r24	; 0x0d
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	9e 85       	ldd	r25, Y+14	; 0x0e
    1376:	fc 01       	movw	r30, r24
    1378:	25 91       	lpm	r18, Z+
    137a:	34 91       	lpm	r19, Z
    137c:	cf 01       	movw	r24, r30
    137e:	38 8b       	std	Y+16, r19	; 0x10
    1380:	2f 87       	std	Y+15, r18	; 0x0f
    1382:	9e 87       	std	Y+14, r25	; 0x0e
    1384:	8d 87       	std	Y+13, r24	; 0x0d
    1386:	8f 85       	ldd	r24, Y+15	; 0x0f
    1388:	98 89       	ldd	r25, Y+16	; 0x10
    138a:	9a 8b       	std	Y+18, r25	; 0x12
    138c:	89 8b       	std	Y+17, r24	; 0x11
    138e:	8f e5       	ldi	r24, 0x5F	; 95
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	fc 01       	movw	r30, r24
    1394:	80 81       	ld	r24, Z
    1396:	8b 8b       	std	Y+19, r24	; 0x13
    1398:	f8 94       	cli
    139a:	8d 89       	ldd	r24, Y+21	; 0x15
    139c:	88 23       	and	r24, r24
    139e:	71 f4       	brne	.+28     	; 0x13bc <digitalWrite+0xdc>
    13a0:	89 89       	ldd	r24, Y+17	; 0x11
    13a2:	9a 89       	ldd	r25, Y+18	; 0x12
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	98 2f       	mov	r25, r24
    13aa:	88 85       	ldd	r24, Y+8	; 0x08
    13ac:	80 95       	com	r24
    13ae:	89 23       	and	r24, r25
    13b0:	28 2f       	mov	r18, r24
    13b2:	89 89       	ldd	r24, Y+17	; 0x11
    13b4:	9a 89       	ldd	r25, Y+18	; 0x12
    13b6:	fc 01       	movw	r30, r24
    13b8:	20 83       	st	Z, r18
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <digitalWrite+0xf2>
    13bc:	89 89       	ldd	r24, Y+17	; 0x11
    13be:	9a 89       	ldd	r25, Y+18	; 0x12
    13c0:	fc 01       	movw	r30, r24
    13c2:	90 81       	ld	r25, Z
    13c4:	88 85       	ldd	r24, Y+8	; 0x08
    13c6:	29 2f       	mov	r18, r25
    13c8:	28 2b       	or	r18, r24
    13ca:	89 89       	ldd	r24, Y+17	; 0x11
    13cc:	9a 89       	ldd	r25, Y+18	; 0x12
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
    13d2:	8f e5       	ldi	r24, 0x5F	; 95
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	2b 89       	ldd	r18, Y+19	; 0x13
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
    13dc:	65 96       	adiw	r28, 0x15	; 21
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <__udivmodhi4>:
    13ee:	aa 1b       	sub	r26, r26
    13f0:	bb 1b       	sub	r27, r27
    13f2:	51 e1       	ldi	r21, 0x11	; 17
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <__udivmodhi4_ep>

000013f6 <__udivmodhi4_loop>:
    13f6:	aa 1f       	adc	r26, r26
    13f8:	bb 1f       	adc	r27, r27
    13fa:	a6 17       	cp	r26, r22
    13fc:	b7 07       	cpc	r27, r23
    13fe:	10 f0       	brcs	.+4      	; 0x1404 <__udivmodhi4_ep>
    1400:	a6 1b       	sub	r26, r22
    1402:	b7 0b       	sbc	r27, r23

00001404 <__udivmodhi4_ep>:
    1404:	88 1f       	adc	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	5a 95       	dec	r21
    140a:	a9 f7       	brne	.-22     	; 0x13f6 <__udivmodhi4_loop>
    140c:	80 95       	com	r24
    140e:	90 95       	com	r25
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	08 95       	ret

00001416 <__divmodhi4>:
    1416:	97 fb       	bst	r25, 7
    1418:	07 2e       	mov	r0, r23
    141a:	16 f4       	brtc	.+4      	; 0x1420 <__divmodhi4+0xa>
    141c:	00 94       	com	r0
    141e:	07 d0       	rcall	.+14     	; 0x142e <__divmodhi4_neg1>
    1420:	77 fd       	sbrc	r23, 7
    1422:	09 d0       	rcall	.+18     	; 0x1436 <__divmodhi4_neg2>
    1424:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__udivmodhi4>
    1428:	07 fc       	sbrc	r0, 7
    142a:	05 d0       	rcall	.+10     	; 0x1436 <__divmodhi4_neg2>
    142c:	3e f4       	brtc	.+14     	; 0x143c <__divmodhi4_exit>

0000142e <__divmodhi4_neg1>:
    142e:	90 95       	com	r25
    1430:	81 95       	neg	r24
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	08 95       	ret

00001436 <__divmodhi4_neg2>:
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255

0000143c <__divmodhi4_exit>:
    143c:	08 95       	ret

0000143e <__divmodsi4>:
    143e:	05 2e       	mov	r0, r21
    1440:	97 fb       	bst	r25, 7
    1442:	1e f4       	brtc	.+6      	; 0x144a <__divmodsi4+0xc>
    1444:	00 94       	com	r0
    1446:	0e 94 36 0a 	call	0x146c	; 0x146c <__negsi2>
    144a:	57 fd       	sbrc	r21, 7
    144c:	07 d0       	rcall	.+14     	; 0x145c <__divmodsi4_neg2>
    144e:	0e 94 3e 0a 	call	0x147c	; 0x147c <__udivmodsi4>
    1452:	07 fc       	sbrc	r0, 7
    1454:	03 d0       	rcall	.+6      	; 0x145c <__divmodsi4_neg2>
    1456:	4e f4       	brtc	.+18     	; 0x146a <__divmodsi4_exit>
    1458:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__negsi2>

0000145c <__divmodsi4_neg2>:
    145c:	50 95       	com	r21
    145e:	40 95       	com	r20
    1460:	30 95       	com	r19
    1462:	21 95       	neg	r18
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	4f 4f       	sbci	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255

0000146a <__divmodsi4_exit>:
    146a:	08 95       	ret

0000146c <__negsi2>:
    146c:	90 95       	com	r25
    146e:	80 95       	com	r24
    1470:	70 95       	com	r23
    1472:	61 95       	neg	r22
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__udivmodsi4>:
    147c:	a1 e2       	ldi	r26, 0x21	; 33
    147e:	1a 2e       	mov	r1, r26
    1480:	aa 1b       	sub	r26, r26
    1482:	bb 1b       	sub	r27, r27
    1484:	fd 01       	movw	r30, r26
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <__udivmodsi4_ep>

00001488 <__udivmodsi4_loop>:
    1488:	aa 1f       	adc	r26, r26
    148a:	bb 1f       	adc	r27, r27
    148c:	ee 1f       	adc	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	a2 17       	cp	r26, r18
    1492:	b3 07       	cpc	r27, r19
    1494:	e4 07       	cpc	r30, r20
    1496:	f5 07       	cpc	r31, r21
    1498:	20 f0       	brcs	.+8      	; 0x14a2 <__udivmodsi4_ep>
    149a:	a2 1b       	sub	r26, r18
    149c:	b3 0b       	sbc	r27, r19
    149e:	e4 0b       	sbc	r30, r20
    14a0:	f5 0b       	sbc	r31, r21

000014a2 <__udivmodsi4_ep>:
    14a2:	66 1f       	adc	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	1a 94       	dec	r1
    14ac:	69 f7       	brne	.-38     	; 0x1488 <__udivmodsi4_loop>
    14ae:	60 95       	com	r22
    14b0:	70 95       	com	r23
    14b2:	80 95       	com	r24
    14b4:	90 95       	com	r25
    14b6:	9b 01       	movw	r18, r22
    14b8:	ac 01       	movw	r20, r24
    14ba:	bd 01       	movw	r22, r26
    14bc:	cf 01       	movw	r24, r30
    14be:	08 95       	ret

000014c0 <__tablejump2__>:
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	05 90       	lpm	r0, Z+
    14c6:	f4 91       	lpm	r31, Z
    14c8:	e0 2d       	mov	r30, r0
    14ca:	09 94       	ijmp

000014cc <malloc>:
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	91 05       	cpc	r25, r1
    14d4:	10 f4       	brcc	.+4      	; 0x14da <malloc+0xe>
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	e0 91 24 01 	lds	r30, 0x0124
    14de:	f0 91 25 01 	lds	r31, 0x0125
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	c0 e0       	ldi	r28, 0x00	; 0
    14e8:	d0 e0       	ldi	r29, 0x00	; 0
    14ea:	30 97       	sbiw	r30, 0x00	; 0
    14ec:	11 f1       	breq	.+68     	; 0x1532 <malloc+0x66>
    14ee:	40 81       	ld	r20, Z
    14f0:	51 81       	ldd	r21, Z+1	; 0x01
    14f2:	48 17       	cp	r20, r24
    14f4:	59 07       	cpc	r21, r25
    14f6:	c0 f0       	brcs	.+48     	; 0x1528 <malloc+0x5c>
    14f8:	48 17       	cp	r20, r24
    14fa:	59 07       	cpc	r21, r25
    14fc:	61 f4       	brne	.+24     	; 0x1516 <malloc+0x4a>
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	20 97       	sbiw	r28, 0x00	; 0
    1504:	19 f0       	breq	.+6      	; 0x150c <malloc+0x40>
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	2b c0       	rjmp	.+86     	; 0x1562 <malloc+0x96>
    150c:	90 93 25 01 	sts	0x0125, r25
    1510:	80 93 24 01 	sts	0x0124, r24
    1514:	26 c0       	rjmp	.+76     	; 0x1562 <malloc+0x96>
    1516:	21 15       	cp	r18, r1
    1518:	31 05       	cpc	r19, r1
    151a:	19 f0       	breq	.+6      	; 0x1522 <malloc+0x56>
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	18 f4       	brcc	.+6      	; 0x1528 <malloc+0x5c>
    1522:	9a 01       	movw	r18, r20
    1524:	be 01       	movw	r22, r28
    1526:	df 01       	movw	r26, r30
    1528:	ef 01       	movw	r28, r30
    152a:	02 80       	ldd	r0, Z+2	; 0x02
    152c:	f3 81       	ldd	r31, Z+3	; 0x03
    152e:	e0 2d       	mov	r30, r0
    1530:	dc cf       	rjmp	.-72     	; 0x14ea <malloc+0x1e>
    1532:	21 15       	cp	r18, r1
    1534:	31 05       	cpc	r19, r1
    1536:	09 f1       	breq	.+66     	; 0x157a <malloc+0xae>
    1538:	28 1b       	sub	r18, r24
    153a:	39 0b       	sbc	r19, r25
    153c:	24 30       	cpi	r18, 0x04	; 4
    153e:	31 05       	cpc	r19, r1
    1540:	90 f4       	brcc	.+36     	; 0x1566 <malloc+0x9a>
    1542:	12 96       	adiw	r26, 0x02	; 2
    1544:	8d 91       	ld	r24, X+
    1546:	9c 91       	ld	r25, X
    1548:	13 97       	sbiw	r26, 0x03	; 3
    154a:	61 15       	cp	r22, r1
    154c:	71 05       	cpc	r23, r1
    154e:	21 f0       	breq	.+8      	; 0x1558 <malloc+0x8c>
    1550:	fb 01       	movw	r30, r22
    1552:	93 83       	std	Z+3, r25	; 0x03
    1554:	82 83       	std	Z+2, r24	; 0x02
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <malloc+0x94>
    1558:	90 93 25 01 	sts	0x0125, r25
    155c:	80 93 24 01 	sts	0x0124, r24
    1560:	fd 01       	movw	r30, r26
    1562:	32 96       	adiw	r30, 0x02	; 2
    1564:	44 c0       	rjmp	.+136    	; 0x15ee <malloc+0x122>
    1566:	fd 01       	movw	r30, r26
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	81 93       	st	Z+, r24
    156e:	91 93       	st	Z+, r25
    1570:	22 50       	subi	r18, 0x02	; 2
    1572:	31 09       	sbc	r19, r1
    1574:	2d 93       	st	X+, r18
    1576:	3c 93       	st	X, r19
    1578:	3a c0       	rjmp	.+116    	; 0x15ee <malloc+0x122>
    157a:	20 91 22 01 	lds	r18, 0x0122
    157e:	30 91 23 01 	lds	r19, 0x0123
    1582:	23 2b       	or	r18, r19
    1584:	41 f4       	brne	.+16     	; 0x1596 <malloc+0xca>
    1586:	20 91 02 01 	lds	r18, 0x0102
    158a:	30 91 03 01 	lds	r19, 0x0103
    158e:	30 93 23 01 	sts	0x0123, r19
    1592:	20 93 22 01 	sts	0x0122, r18
    1596:	20 91 00 01 	lds	r18, 0x0100
    159a:	30 91 01 01 	lds	r19, 0x0101
    159e:	21 15       	cp	r18, r1
    15a0:	31 05       	cpc	r19, r1
    15a2:	41 f4       	brne	.+16     	; 0x15b4 <malloc+0xe8>
    15a4:	2d b7       	in	r18, 0x3d	; 61
    15a6:	3e b7       	in	r19, 0x3e	; 62
    15a8:	40 91 04 01 	lds	r20, 0x0104
    15ac:	50 91 05 01 	lds	r21, 0x0105
    15b0:	24 1b       	sub	r18, r20
    15b2:	35 0b       	sbc	r19, r21
    15b4:	e0 91 22 01 	lds	r30, 0x0122
    15b8:	f0 91 23 01 	lds	r31, 0x0123
    15bc:	e2 17       	cp	r30, r18
    15be:	f3 07       	cpc	r31, r19
    15c0:	a0 f4       	brcc	.+40     	; 0x15ea <malloc+0x11e>
    15c2:	2e 1b       	sub	r18, r30
    15c4:	3f 0b       	sbc	r19, r31
    15c6:	28 17       	cp	r18, r24
    15c8:	39 07       	cpc	r19, r25
    15ca:	78 f0       	brcs	.+30     	; 0x15ea <malloc+0x11e>
    15cc:	ac 01       	movw	r20, r24
    15ce:	4e 5f       	subi	r20, 0xFE	; 254
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	24 17       	cp	r18, r20
    15d4:	35 07       	cpc	r19, r21
    15d6:	48 f0       	brcs	.+18     	; 0x15ea <malloc+0x11e>
    15d8:	4e 0f       	add	r20, r30
    15da:	5f 1f       	adc	r21, r31
    15dc:	50 93 23 01 	sts	0x0123, r21
    15e0:	40 93 22 01 	sts	0x0122, r20
    15e4:	81 93       	st	Z+, r24
    15e6:	91 93       	st	Z+, r25
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <malloc+0x122>
    15ea:	e0 e0       	ldi	r30, 0x00	; 0
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	cf 01       	movw	r24, r30
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <free>:
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	09 f4       	brne	.+2      	; 0x1604 <free+0xe>
    1602:	8c c0       	rjmp	.+280    	; 0x171c <free+0x126>
    1604:	fc 01       	movw	r30, r24
    1606:	32 97       	sbiw	r30, 0x02	; 2
    1608:	13 82       	std	Z+3, r1	; 0x03
    160a:	12 82       	std	Z+2, r1	; 0x02
    160c:	00 91 24 01 	lds	r16, 0x0124
    1610:	10 91 25 01 	lds	r17, 0x0125
    1614:	01 15       	cp	r16, r1
    1616:	11 05       	cpc	r17, r1
    1618:	81 f4       	brne	.+32     	; 0x163a <free+0x44>
    161a:	20 81       	ld	r18, Z
    161c:	31 81       	ldd	r19, Z+1	; 0x01
    161e:	82 0f       	add	r24, r18
    1620:	93 1f       	adc	r25, r19
    1622:	20 91 22 01 	lds	r18, 0x0122
    1626:	30 91 23 01 	lds	r19, 0x0123
    162a:	28 17       	cp	r18, r24
    162c:	39 07       	cpc	r19, r25
    162e:	79 f5       	brne	.+94     	; 0x168e <free+0x98>
    1630:	f0 93 23 01 	sts	0x0123, r31
    1634:	e0 93 22 01 	sts	0x0122, r30
    1638:	71 c0       	rjmp	.+226    	; 0x171c <free+0x126>
    163a:	d8 01       	movw	r26, r16
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	ae 17       	cp	r26, r30
    1642:	bf 07       	cpc	r27, r31
    1644:	50 f4       	brcc	.+20     	; 0x165a <free+0x64>
    1646:	12 96       	adiw	r26, 0x02	; 2
    1648:	2d 91       	ld	r18, X+
    164a:	3c 91       	ld	r19, X
    164c:	13 97       	sbiw	r26, 0x03	; 3
    164e:	ad 01       	movw	r20, r26
    1650:	21 15       	cp	r18, r1
    1652:	31 05       	cpc	r19, r1
    1654:	09 f1       	breq	.+66     	; 0x1698 <free+0xa2>
    1656:	d9 01       	movw	r26, r18
    1658:	f3 cf       	rjmp	.-26     	; 0x1640 <free+0x4a>
    165a:	9d 01       	movw	r18, r26
    165c:	da 01       	movw	r26, r20
    165e:	33 83       	std	Z+3, r19	; 0x03
    1660:	22 83       	std	Z+2, r18	; 0x02
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	86 0f       	add	r24, r22
    1668:	97 1f       	adc	r25, r23
    166a:	82 17       	cp	r24, r18
    166c:	93 07       	cpc	r25, r19
    166e:	69 f4       	brne	.+26     	; 0x168a <free+0x94>
    1670:	ec 01       	movw	r28, r24
    1672:	28 81       	ld	r18, Y
    1674:	39 81       	ldd	r19, Y+1	; 0x01
    1676:	26 0f       	add	r18, r22
    1678:	37 1f       	adc	r19, r23
    167a:	2e 5f       	subi	r18, 0xFE	; 254
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	31 83       	std	Z+1, r19	; 0x01
    1680:	20 83       	st	Z, r18
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	93 83       	std	Z+3, r25	; 0x03
    1688:	82 83       	std	Z+2, r24	; 0x02
    168a:	45 2b       	or	r20, r21
    168c:	29 f4       	brne	.+10     	; 0x1698 <free+0xa2>
    168e:	f0 93 25 01 	sts	0x0125, r31
    1692:	e0 93 24 01 	sts	0x0124, r30
    1696:	42 c0       	rjmp	.+132    	; 0x171c <free+0x126>
    1698:	13 96       	adiw	r26, 0x03	; 3
    169a:	fc 93       	st	X, r31
    169c:	ee 93       	st	-X, r30
    169e:	12 97       	sbiw	r26, 0x02	; 2
    16a0:	ed 01       	movw	r28, r26
    16a2:	49 91       	ld	r20, Y+
    16a4:	59 91       	ld	r21, Y+
    16a6:	9e 01       	movw	r18, r28
    16a8:	24 0f       	add	r18, r20
    16aa:	35 1f       	adc	r19, r21
    16ac:	e2 17       	cp	r30, r18
    16ae:	f3 07       	cpc	r31, r19
    16b0:	71 f4       	brne	.+28     	; 0x16ce <free+0xd8>
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	84 0f       	add	r24, r20
    16b8:	95 1f       	adc	r25, r21
    16ba:	02 96       	adiw	r24, 0x02	; 2
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	9c 93       	st	X, r25
    16c0:	8e 93       	st	-X, r24
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	13 96       	adiw	r26, 0x03	; 3
    16c8:	9c 93       	st	X, r25
    16ca:	8e 93       	st	-X, r24
    16cc:	12 97       	sbiw	r26, 0x02	; 2
    16ce:	e0 e0       	ldi	r30, 0x00	; 0
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	d8 01       	movw	r26, r16
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	8d 91       	ld	r24, X+
    16d8:	9c 91       	ld	r25, X
    16da:	13 97       	sbiw	r26, 0x03	; 3
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	19 f0       	breq	.+6      	; 0x16e6 <free+0xf0>
    16e0:	f8 01       	movw	r30, r16
    16e2:	8c 01       	movw	r16, r24
    16e4:	f6 cf       	rjmp	.-20     	; 0x16d2 <free+0xdc>
    16e6:	8d 91       	ld	r24, X+
    16e8:	9c 91       	ld	r25, X
    16ea:	98 01       	movw	r18, r16
    16ec:	2e 5f       	subi	r18, 0xFE	; 254
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	20 91 22 01 	lds	r18, 0x0122
    16f8:	30 91 23 01 	lds	r19, 0x0123
    16fc:	28 17       	cp	r18, r24
    16fe:	39 07       	cpc	r19, r25
    1700:	69 f4       	brne	.+26     	; 0x171c <free+0x126>
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	29 f4       	brne	.+10     	; 0x1710 <free+0x11a>
    1706:	10 92 25 01 	sts	0x0125, r1
    170a:	10 92 24 01 	sts	0x0124, r1
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <free+0x11e>
    1710:	13 82       	std	Z+3, r1	; 0x03
    1712:	12 82       	std	Z+2, r1	; 0x02
    1714:	10 93 23 01 	sts	0x0123, r17
    1718:	00 93 22 01 	sts	0x0122, r16
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <memset>:
    1726:	dc 01       	movw	r26, r24
    1728:	01 c0       	rjmp	.+2      	; 0x172c <memset+0x6>
    172a:	6d 93       	st	X+, r22
    172c:	41 50       	subi	r20, 0x01	; 1
    172e:	50 40       	sbci	r21, 0x00	; 0
    1730:	e0 f7       	brcc	.-8      	; 0x172a <memset+0x4>
    1732:	08 95       	ret

00001734 <__do_global_dtors>:
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	cd e5       	ldi	r28, 0x5D	; 93
    1738:	d0 e0       	ldi	r29, 0x00	; 0
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <__do_global_dtors+0x10>
    173c:	fe 01       	movw	r30, r28
    173e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__tablejump2__>
    1742:	21 96       	adiw	r28, 0x01	; 1
    1744:	ce 35       	cpi	r28, 0x5E	; 94
    1746:	d1 07       	cpc	r29, r17
    1748:	c9 f7       	brne	.-14     	; 0x173c <__do_global_dtors+0x8>
    174a:	f8 94       	cli

0000174c <__stop_program>:
    174c:	ff cf       	rjmp	.-2      	; 0x174c <__stop_program>
